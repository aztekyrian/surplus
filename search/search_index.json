{
    "docs": [
        {
            "location": "/index.html",
            "text": "Overview\n\u00b6\n\n\nDelphix Integrations is Delphix's response to address the lack of data agility that many organizations face today in their DevOps, ProdOps and AI/ML workflows. \nMany of these ecosystems have solved the automation of code and infrastructure but still face a data bottlenecks. \nOur focus is to simplify the integration of Delphix operations into these ecosystems and to plug-in the required data agility into these workflows that are frequently used by developers, testers, analysts and administrators.\n\n\ndxi, the first release from Delphix Integrations project, is a CLI and a Python Library, designed to easily automate Delphix operations that are commonly used in workflows.\nWe recognize that despite being fully-featured, Delphix APIs were hard to use. \nEven a simple operation could require multiple nested configuration arguments that users were not necessarily aware of. \ndxi takes a simpler approach and minimizes the knowledge required to automate Delphix data virtualization operations.\n\n\nWe also recognize that some users prefer out of the box integrations with third party tools. \nIn response, future iterations of Delphix Integrations will feature Delphix support within the most popular developer tools.\n\n\nPython library (dxi library)\n\u00b6\n\n\nThe dxi library is an interface for developing Python applications that connection & perform Virtualization and Self-Service operations across on a single or multiple Delphix Engines.\n\n\nWe chose Python because it's our customers\u2019 language of choice when creating DevOps, ProdOps and AI/ML workflows due to its flexibility, extensibility and support.\n\n\nExample Usage: \n\n    \nfrom\n \ndxi.database.dxi_refresh\n \nimport\n \nDXIRefresh\n     \n\n    \nref\n \n=\n \nDXIRefresh\n()\n\n    \nref\n.\nrefresh\n(\nname\n=\n\u201c\nvirtualdb1\n\u201d\n)\n\n\n\n\nCommand line interface (dxi cli)\n\u00b6\n\n\ndxi cli is an interface for calling delphix operations from the command line. \nIt is intended to work in different configurations and will soon be provided as a set of compiled executables for ease of use and compatibility.\n\n\nExample Usage:\n\n    dxi database refresh --name virtualdb1\n\n\n\nWhere to start\n\u00b6\n\n\nIf you are not familiar with Delphix, we recommend you to start with our \nDocumentation\n.\n\n\nIf you are already familiar with Delphix, but want to learn more about dxi, \nyou can go to the \nGetting started\n section or jump to Sample Integrations for some hands-on examples.\n\n\nQuestions?\n\u00b6\n\n\nIf you have questions, bugs or feature requests reach out to us via \nemail",
            "title": "Overview"
        },
        {
            "location": "/index.html#overview",
            "text": "Delphix Integrations is Delphix's response to address the lack of data agility that many organizations face today in their DevOps, ProdOps and AI/ML workflows. \nMany of these ecosystems have solved the automation of code and infrastructure but still face a data bottlenecks. \nOur focus is to simplify the integration of Delphix operations into these ecosystems and to plug-in the required data agility into these workflows that are frequently used by developers, testers, analysts and administrators.  dxi, the first release from Delphix Integrations project, is a CLI and a Python Library, designed to easily automate Delphix operations that are commonly used in workflows.\nWe recognize that despite being fully-featured, Delphix APIs were hard to use. \nEven a simple operation could require multiple nested configuration arguments that users were not necessarily aware of. \ndxi takes a simpler approach and minimizes the knowledge required to automate Delphix data virtualization operations.  We also recognize that some users prefer out of the box integrations with third party tools. \nIn response, future iterations of Delphix Integrations will feature Delphix support within the most popular developer tools.",
            "title": "Overview"
        },
        {
            "location": "/index.html#python-library-dxi-library",
            "text": "The dxi library is an interface for developing Python applications that connection & perform Virtualization and Self-Service operations across on a single or multiple Delphix Engines.  We chose Python because it's our customers\u2019 language of choice when creating DevOps, ProdOps and AI/ML workflows due to its flexibility, extensibility and support.  Example Usage:       from   dxi.database.dxi_refresh   import   DXIRefresh      \n\n     ref   =   DXIRefresh () \n     ref . refresh ( name = \u201c virtualdb1 \u201d )",
            "title": "Python library (dxi library)"
        },
        {
            "location": "/index.html#command-line-interface-dxi-cli",
            "text": "dxi cli is an interface for calling delphix operations from the command line. \nIt is intended to work in different configurations and will soon be provided as a set of compiled executables for ease of use and compatibility.  Example Usage:     dxi database refresh --name virtualdb1",
            "title": "Command line interface (dxi cli)"
        },
        {
            "location": "/index.html#where-to-start",
            "text": "If you are not familiar with Delphix, we recommend you to start with our  Documentation .  If you are already familiar with Delphix, but want to learn more about dxi, \nyou can go to the  Getting started  section or jump to Sample Integrations for some hands-on examples.",
            "title": "Where to start"
        },
        {
            "location": "/index.html#questions",
            "text": "If you have questions, bugs or feature requests reach out to us via  email",
            "title": "Questions?"
        },
        {
            "location": "/GettingStarted/index.html",
            "text": "Getting Started Now\n\u00b6\n\n\ndxi is a Python Library and CLI that is available for download from download.delphix.com and \nPyPI\n. \nInstall dxi to your local environment or server(s) from where you would initiate the Delphix operations. \n\n\ndxi consists of two parts:\n\n\n\n\nThe dxi python library\n\n\nThe dxi command line interface (cli)\n\n\n\n\nThe dxi library exposes expose objects amd methods to easily initiate a Delphix operation programmatically.\n\n\nThe dxi cli exposes a command line interface to initiate the same Delphix operations from your terminal. \n\n\nRequirements\n\u00b6\n\n\n\n\nmacOS 10.15+, Windows 10\n\n\nPython 3.7 or above (Python version < 3.6 are not supported)    \n\n\nDelphix Engine 5.3.9 or above\n\n\n\n\nInstalling dxi\n\u00b6\n\n\n\n\nUse a Virtual Environment\n\n\nIf you are using dxi library for development, we recommend that you do this inside a virtual environment.\nTo learn more about virtual environments, refer to \nVirtualenv's documentation\n.\n\n\nThe virtual environment needs to use Python 3.7 or higher. \n\n\n\n\nFrom download.delphix.com\n\u00b6\n\n\n\n\n\n\nDownload the \ndxi-x.y.z.tar\n from download.delphix.com  \n\n\n\n\n\n\nCopy dxi.tar to the directory where you want to install dxi\n\n\n\n\n\n\nUnzip the contents of the tar file. You should see a setup.py file in the extracted contents.\n\n    \n    tar -xvf dxi-x.y.z.tar\n\n\n\n\n\nInstall dxi\n    \n    pip3 install .     \n\n\n\n\n\nFrom PyPI\n\u00b6\n\n\nTo install the latest version dxi \n\n    pip3 install dxi\n\n\n\nTest your installation\n\u00b6\n\n\nRun the following command to verify that your installation was successful\n\n\n    dxi --help\n\n\nYou should see the dxi cli options as shown below\n\n        Usage: dxi [OPTIONS] COMMAND [ARGS]...\n\n          This is the main CLI command\n\n        Options:\n          --version  Show the version and exit.\n          --help     Show this message and exit.\n\n        Commands:\n          bookmark     Group command for Bookmark operations\n          branch       Group command for branch operations\n          container    Creates, Lists, Removes a Self-Service Data Pod\n          database     database is a group command perform dsource or vdb operations\n          environment  Group command for environment operations\n          snapshot     To Add and Delete snapshots\n          template     Command for all Self Service Template related operations\n\n\n\nConfiguring dxi\n\u00b6\n\n\nGreat! You have installed the dxi cli and library successfully.\n\nLet us now configure dxi to connect with your Delphix Engines. \n\n\nConfiguration File\n\u00b6\n\n\nBy default, dxi reads your Delphix engine configuration from a json file named dxtools.conf. \nThis file will be located at the following path under your python site-packages directory\n\n    <your_python_install_dir>/site-packages/dxi/config/dxtools.conf\n\n\n\nConfig File Structure\n\u00b6\n\n\n    \n{\n\n      \n\"name\"\n:\n \n[\n\n        \n{\n\n          \n\"ip_address\"\n:\n \n\"2.222.222.222\"\n,\n\n          \n\"username\"\n:\n \n\"username\"\n,\n\n          \n\"password\"\n:\n \n\"password\"\n,\n\n          \n\"use_https\"\n:\n \n\"False\"\n,\n\n          \n\"default\"\n:\n \n\"False\"\n,\n\n          \n\"hostname\"\n:\n \n\"engine_host_name_1\"\n\n        \n}\n\n      \n],\n\n      \n\"name\"\n:\n \n[\n\n        \n{\n\n          \n\"ip_address\"\n:\n \n\"1.111.22.111\"\n,\n\n          \n\"username\"\n:\n \n\"admin\"\n,\n\n          \n\"password\"\n:\n \n\"delphix\"\n,\n\n          \n\"use_https\"\n:\n \n\"True\"\n,\n\n          \n\"default\"\n:\n \n\"True\"\n,\n\n          \n\"hostname\"\n:\n \n\"engine_host_name_2\"\n\n        \n}\n\n      \n]\n  \n    \n}\n\n\n\n\nDescription of Fields\n\u00b6\n\n\n\n\nname - Friendly name used to identify a Delphix Engine. This is the identifier dxi uses for an engine.\n\n\nip_address - Delphix Engine IP address or hostname\n\n\nusername - Delphix username\n\n\npassword - Delphix username password\n\n\nport - Port number to communicate with the engine - 80 | 443\n\n\ndefault - Is this Delphix Engine, a default one - true | false\n\n\nuse_https - What protocol will be used for communication - true | false\n\n\nhostname - This can be same as the name field. This value is used for debug logging.\n\n\n\n\nProviding your own config file\n\u00b6\n\n\nYou can provide your own config file for dxi as shown below. \nPlease ensure that the json format of the provided file conforms to the sample show above.\n\n\ndxi cli:\n\n\n    dxi database refresh --config /full/path/with/configfile/name\n\n\n\ndxi library:\n\n\n    \nref\n \n=\n \nDXIRefresh\n(\nconfig\n=\n\"/full/path/with/configfile/name\"\n)\n\n\n\n\nGreat!\n\u00b6\n\n\nYou have set up and configured dxi on your environment.    \n\n\nFor information on how to use dxi as a CLI, refer to CLI References section under References\nFor information on how to use dxi as a Library, refer to Library References section under References",
            "title": "Getting Started Now"
        },
        {
            "location": "/GettingStarted/index.html#getting-started-now",
            "text": "dxi is a Python Library and CLI that is available for download from download.delphix.com and  PyPI . \nInstall dxi to your local environment or server(s) from where you would initiate the Delphix operations.   dxi consists of two parts:   The dxi python library  The dxi command line interface (cli)   The dxi library exposes expose objects amd methods to easily initiate a Delphix operation programmatically.  The dxi cli exposes a command line interface to initiate the same Delphix operations from your terminal.",
            "title": "Getting Started Now"
        },
        {
            "location": "/GettingStarted/index.html#requirements",
            "text": "macOS 10.15+, Windows 10  Python 3.7 or above (Python version < 3.6 are not supported)      Delphix Engine 5.3.9 or above",
            "title": "Requirements"
        },
        {
            "location": "/GettingStarted/index.html#installing-dxi",
            "text": "Use a Virtual Environment  If you are using dxi library for development, we recommend that you do this inside a virtual environment.\nTo learn more about virtual environments, refer to  Virtualenv's documentation .  The virtual environment needs to use Python 3.7 or higher.",
            "title": "Installing dxi"
        },
        {
            "location": "/GettingStarted/index.html#from-downloaddelphixcom",
            "text": "Download the  dxi-x.y.z.tar  from download.delphix.com      Copy dxi.tar to the directory where you want to install dxi    Unzip the contents of the tar file. You should see a setup.py file in the extracted contents. \n         tar -xvf dxi-x.y.z.tar   Install dxi\n         pip3 install .",
            "title": "From download.delphix.com"
        },
        {
            "location": "/GettingStarted/index.html#from-pypi",
            "text": "To install the latest version dxi      pip3 install dxi",
            "title": "From PyPI"
        },
        {
            "location": "/GettingStarted/index.html#test-your-installation",
            "text": "Run the following command to verify that your installation was successful      dxi --help \nYou should see the dxi cli options as shown below         Usage: dxi [OPTIONS] COMMAND [ARGS]...\n\n          This is the main CLI command\n\n        Options:\n          --version  Show the version and exit.\n          --help     Show this message and exit.\n\n        Commands:\n          bookmark     Group command for Bookmark operations\n          branch       Group command for branch operations\n          container    Creates, Lists, Removes a Self-Service Data Pod\n          database     database is a group command perform dsource or vdb operations\n          environment  Group command for environment operations\n          snapshot     To Add and Delete snapshots\n          template     Command for all Self Service Template related operations",
            "title": "Test your installation"
        },
        {
            "location": "/GettingStarted/index.html#configuring-dxi",
            "text": "Great! You have installed the dxi cli and library successfully. \nLet us now configure dxi to connect with your Delphix Engines.",
            "title": "Configuring dxi"
        },
        {
            "location": "/GettingStarted/index.html#configuration-file",
            "text": "By default, dxi reads your Delphix engine configuration from a json file named dxtools.conf. \nThis file will be located at the following path under your python site-packages directory     <your_python_install_dir>/site-packages/dxi/config/dxtools.conf",
            "title": "Configuration File"
        },
        {
            "location": "/GettingStarted/index.html#config-file-structure",
            "text": "{ \n       \"name\" :   [ \n         { \n           \"ip_address\" :   \"2.222.222.222\" , \n           \"username\" :   \"username\" , \n           \"password\" :   \"password\" , \n           \"use_https\" :   \"False\" , \n           \"default\" :   \"False\" , \n           \"hostname\" :   \"engine_host_name_1\" \n         } \n       ], \n       \"name\" :   [ \n         { \n           \"ip_address\" :   \"1.111.22.111\" , \n           \"username\" :   \"admin\" , \n           \"password\" :   \"delphix\" , \n           \"use_https\" :   \"True\" , \n           \"default\" :   \"True\" , \n           \"hostname\" :   \"engine_host_name_2\" \n         } \n       ]   \n     }",
            "title": "Config File Structure"
        },
        {
            "location": "/GettingStarted/index.html#description-of-fields",
            "text": "name - Friendly name used to identify a Delphix Engine. This is the identifier dxi uses for an engine.  ip_address - Delphix Engine IP address or hostname  username - Delphix username  password - Delphix username password  port - Port number to communicate with the engine - 80 | 443  default - Is this Delphix Engine, a default one - true | false  use_https - What protocol will be used for communication - true | false  hostname - This can be same as the name field. This value is used for debug logging.",
            "title": "Description of Fields"
        },
        {
            "location": "/GettingStarted/index.html#providing-your-own-config-file",
            "text": "You can provide your own config file for dxi as shown below. \nPlease ensure that the json format of the provided file conforms to the sample show above.  dxi cli:      dxi database refresh --config /full/path/with/configfile/name  dxi library:       ref   =   DXIRefresh ( config = \"/full/path/with/configfile/name\" )",
            "title": "Providing your own config file"
        },
        {
            "location": "/GettingStarted/index.html#great",
            "text": "You have set up and configured dxi on your environment.      For information on how to use dxi as a CLI, refer to CLI References section under References\nFor information on how to use dxi as a Library, refer to Library References section under References",
            "title": "Great!"
        },
        {
            "location": "/References/CLI_References/environment/index.html",
            "text": "Environment\n\u00b6\n\n\nAn Environment in Delphix is a Windows/ Linux / Unix Host that has been linked to Delphix. \nAn Environment may be a Source Host or Staging Host or Target Host\n\n\ndxi provides commands to trigger some of the most commonly used environment related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below  \n\n\n\n\ndxi : The main CLI  \n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'environment'.    \n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi environment <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nActions correspond to operations you can perform on the engine. \n\nThe available actions on an environment are \n\n\n\n\nadd - Adds an environment\n\n\ndelete - Deletes an environment\n\n\nupdateHost - Updates the IP address on an existing environment\n\n\nrefresh - Refreshes an existing environment\n\n\nlist - Lists all environments \n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n\n   dxi environment <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi environment --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi environment <operation> --help",
            "title": "Environment"
        },
        {
            "location": "/References/CLI_References/environment/index.html#environment",
            "text": "An Environment in Delphix is a Windows/ Linux / Unix Host that has been linked to Delphix. \nAn Environment may be a Source Host or Staging Host or Target Host  dxi provides commands to trigger some of the most commonly used environment related operations",
            "title": "Environment"
        },
        {
            "location": "/References/CLI_References/environment/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below     dxi : The main CLI    command : Indicates the Delphix object you will be working on. In this case,'environment'.      Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi environment <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/environment/index.html#operations",
            "text": "Actions correspond to operations you can perform on the engine.  \nThe available actions on an environment are    add - Adds an environment  delete - Deletes an environment  updateHost - Updates the IP address on an existing environment  refresh - Refreshes an existing environment  list - Lists all environments",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/environment/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.    dxi environment <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/environment/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/environment/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi environment --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/environment/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi environment <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/CLI_References/database/index.html",
            "text": "Database\n\u00b6\n\n\nA Database refers to any dataset in Delphix.\n\nA Database can be a source (dsource), staging or virtual (vdb or vfiles)\n\n\ndxi provides commands to trigger some of the most commonly used database related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below\n\n\n\n\ndxi : The main CLI\n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'environment'.\n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi database <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nOperations correspond to operations you can perform on the engine. \n\nThe available actions on an database are\n\n\n\n\nlink-oracle - Ingest an Oracle dsource\n\n\nlink-mssql - Ingest a MS SQLServer dsource\n\n\nprovision-mssql - Provision a MS SQLServer VDB\n\n\nprovision-ase - Provision a Sybase VDB\n\n\nprovision-oracle - Provision an Oracle VDB\n\n\nprovision-appdata - Provision AppData (vFiles) dataset  \n\n\nupdateHost - Updates the IP address on an existing environment\n\n\nrefresh - Refreshes a virtual dataset\n\n\nrewind - Rewinds a virtual dataset\n\n\nstart - Starts a virtual dataset\n\n\nstop - Stops a virtual dataset\n\n\nenable - Enables a virtual dataset\n\n\ndisable - Disables a virtual dataset\n\n\ndelete - Deletes a virtual dataset  \n\n\nlist - Lists all datasets on an engine.\n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n \ndxi database <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi database --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi database <operation> --help",
            "title": "Database"
        },
        {
            "location": "/References/CLI_References/database/index.html#database",
            "text": "A Database refers to any dataset in Delphix. \nA Database can be a source (dsource), staging or virtual (vdb or vfiles)  dxi provides commands to trigger some of the most commonly used database related operations",
            "title": "Database"
        },
        {
            "location": "/References/CLI_References/database/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below   dxi : The main CLI  command : Indicates the Delphix object you will be working on. In this case,'environment'.  Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi database <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/database/index.html#operations",
            "text": "Operations correspond to operations you can perform on the engine.  \nThe available actions on an database are   link-oracle - Ingest an Oracle dsource  link-mssql - Ingest a MS SQLServer dsource  provision-mssql - Provision a MS SQLServer VDB  provision-ase - Provision a Sybase VDB  provision-oracle - Provision an Oracle VDB  provision-appdata - Provision AppData (vFiles) dataset    updateHost - Updates the IP address on an existing environment  refresh - Refreshes a virtual dataset  rewind - Rewinds a virtual dataset  start - Starts a virtual dataset  stop - Stops a virtual dataset  enable - Enables a virtual dataset  disable - Disables a virtual dataset  delete - Deletes a virtual dataset    list - Lists all datasets on an engine.",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/database/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.\n  dxi database <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/database/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/database/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi database --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/database/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi database <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html",
            "text": "Snapshot\n\u00b6\n\n\nSnapshots represent points in time where a sync operation has occurred on either a dSource or VDB\n\n\ndxi provides commands to trigger some of the most commonly used snapshot related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below\n\n\n\n\ndxi : The main CLI\n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'snapshot'.\n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi snapshot <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nOperations correspond to operations you can perform on the engine. \n\nThe available actions on an snapshot are\n\n\n\n\ncreate - Creates a snapshot on a dataset.\n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n \ndxi snapshot <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi snapshot --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi snapshot <operation> --help",
            "title": "Snapshot"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#snapshot",
            "text": "Snapshots represent points in time where a sync operation has occurred on either a dSource or VDB  dxi provides commands to trigger some of the most commonly used snapshot related operations",
            "title": "Snapshot"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below   dxi : The main CLI  command : Indicates the Delphix object you will be working on. In this case,'snapshot'.  Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi snapshot <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#operations",
            "text": "Operations correspond to operations you can perform on the engine.  \nThe available actions on an snapshot are   create - Creates a snapshot on a dataset.",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.\n  dxi snapshot <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi snapshot --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/snapshot/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi snapshot <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/CLI_References/template/index.html",
            "text": "Template\n\u00b6\n\n\nA Template (Self Service Template) refers to a blueprint to create Self Service containers in Delphix.\n\n\ndxi provides commands to trigger some of the most commonly used template related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below\n\n\n\n\ndxi : The main CLI\n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'template'.\n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi template <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nOperations correspond to operations you can perform on the engine. \n\nThe available operations on an template are\n\n\n\n\ncreate - Create a template\n\n\ndelete - Deletes a template\n\n\nlist - Lists all templates on an engine.\n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n  \ndxi template <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi template --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi template <operation> --help",
            "title": "Template"
        },
        {
            "location": "/References/CLI_References/template/index.html#template",
            "text": "A Template (Self Service Template) refers to a blueprint to create Self Service containers in Delphix.  dxi provides commands to trigger some of the most commonly used template related operations",
            "title": "Template"
        },
        {
            "location": "/References/CLI_References/template/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below   dxi : The main CLI  command : Indicates the Delphix object you will be working on. In this case,'template'.  Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi template <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/template/index.html#operations",
            "text": "Operations correspond to operations you can perform on the engine.  \nThe available operations on an template are   create - Create a template  delete - Deletes a template  list - Lists all templates on an engine.",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/template/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.\n   dxi template <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/template/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/template/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi template --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/template/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi template <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/CLI_References/container/index.html",
            "text": "Container\n\u00b6\n\n\nA Container (Self Service Container) in Delphix refers to set of Virtual Datasets \nthat are grouped together and can be operated on as a single unit through Delphix Self Service\n\n\ndxi provides commands to trigger some of the most commonly used container related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below\n\n\n\n\ndxi : The main CLI\n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'container'.\n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi container <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nOperations correspond to operations you can perform on the engine. \n\nThe available operations on an container are\n\n\n\n\ncreate - Create a container\n\n\nupdate - Update a container\n\n\ndelete - Deletes a container\n\n\nconnection-info -   Get connection info of a container\n\n\nrefresh - Refresh a container\n\n\nrestore - Restore a container\n\n\nreset - Reset a container  \n\n\nlist - Lists all templates on an engine.\n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n \ndxi container <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi container --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi container <operation> --help",
            "title": "Container"
        },
        {
            "location": "/References/CLI_References/container/index.html#container",
            "text": "A Container (Self Service Container) in Delphix refers to set of Virtual Datasets \nthat are grouped together and can be operated on as a single unit through Delphix Self Service  dxi provides commands to trigger some of the most commonly used container related operations",
            "title": "Container"
        },
        {
            "location": "/References/CLI_References/container/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below   dxi : The main CLI  command : Indicates the Delphix object you will be working on. In this case,'container'.  Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi container <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/container/index.html#operations",
            "text": "Operations correspond to operations you can perform on the engine.  \nThe available operations on an container are   create - Create a container  update - Update a container  delete - Deletes a container  connection-info -   Get connection info of a container  refresh - Refresh a container  restore - Restore a container  reset - Reset a container    list - Lists all templates on an engine.",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/container/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.\n  dxi container <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/container/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/container/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi container --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/container/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi container <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html",
            "text": "Bookmark\n\u00b6\n\n\nBookmarks (Self Service Container Bookmark) are a way to mark and name a particular moment of \ndata on a timeline of a Self Service Container. \n\nYou can restore the active branch's timeline to the moment of data marked with a bookmark\n\n\ndxi provides commands to trigger some of the most commonly used bookmark related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below\n\n\n\n\ndxi : The main CLI\n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'bookmark'.\n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi bookmark <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nOperations correspond to operations you can perform on the engine. \n\nThe available operations on an bookmark are\n\n\n\n\ncreate - Create a bookmark\n\n\nupdate - Update a bookmark\n\n\nshare - Update a bookmark\n\n\nunshare - Update a bookmark  \n\n\ndelete - Deletes a bookmark\n\n\nlist - Lists all bookmarkes on an engine.\n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n  \ndxi bookmark <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi bookmark --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi bookmark <operation> --help",
            "title": "Bookmark"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#bookmark",
            "text": "Bookmarks (Self Service Container Bookmark) are a way to mark and name a particular moment of \ndata on a timeline of a Self Service Container.  \nYou can restore the active branch's timeline to the moment of data marked with a bookmark  dxi provides commands to trigger some of the most commonly used bookmark related operations",
            "title": "Bookmark"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below   dxi : The main CLI  command : Indicates the Delphix object you will be working on. In this case,'bookmark'.  Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi bookmark <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#operations",
            "text": "Operations correspond to operations you can perform on the engine.  \nThe available operations on an bookmark are   create - Create a bookmark  update - Update a bookmark  share - Update a bookmark  unshare - Update a bookmark    delete - Deletes a bookmark  list - Lists all bookmarkes on an engine.",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.\n   dxi bookmark <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi bookmark --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/bookmark/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi bookmark <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/CLI_References/branch/index.html",
            "text": "Branch\n\u00b6\n\n\nA branch (Self Service Container Branch) allows you create \nmultiple versions of your data within a container, just as you would do with code.\n\n\ndxi provides commands to trigger some of the most commonly used branch related operations\n\n\nUsage\n\u00b6\n\n\nEvery dxi cli command has 4 sections as shown below\n\n\n\n\ndxi : The main CLI\n\n\ncommand : Indicates the Delphix object you will be working on. In this case,'branch'.\n\n\nOperation : The operation that you are performing on the Delphix object\n\n\nOptions: Required and Optional parameters for the operation\n\n\n\n\n   dxi branch <operation> [options]\n\n\n\nOperations\n\u00b6\n\n\nOperations correspond to operations you can perform on the engine. \n\nThe available operations on an branch are\n\n\n\n\ncreate - Create a branch\n\n\nactivate - Activate a branch\n\n\ndelete - Deletes a branch\n\n\nlist - Lists all branches on an engine.\n\n\n\n\nOptions\n\u00b6\n\n\nOptions are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.\n\n\n\n\nOptions\n\n\nDetailed information on options coming soon. To view all options for an operation, run the following.\n \ndxi branch <operation> --help\n\n\n\n\n\nAccess Help Information\n\u00b6\n\n\nAt every step, you can access the help information for a dxi command as follows\n\n\nAccess help info for the dxi environment command\n\u00b6\n\n\n   dxi branch --help\n\n\n\nAccess help info for a specific dxi environment action\n\u00b6\n\n\n   dxi branch <operation> --help",
            "title": "Branch"
        },
        {
            "location": "/References/CLI_References/branch/index.html#branch",
            "text": "A branch (Self Service Container Branch) allows you create \nmultiple versions of your data within a container, just as you would do with code.  dxi provides commands to trigger some of the most commonly used branch related operations",
            "title": "Branch"
        },
        {
            "location": "/References/CLI_References/branch/index.html#usage",
            "text": "Every dxi cli command has 4 sections as shown below   dxi : The main CLI  command : Indicates the Delphix object you will be working on. In this case,'branch'.  Operation : The operation that you are performing on the Delphix object  Options: Required and Optional parameters for the operation      dxi branch <operation> [options]",
            "title": "Usage"
        },
        {
            "location": "/References/CLI_References/branch/index.html#operations",
            "text": "Operations correspond to operations you can perform on the engine.  \nThe available operations on an branch are   create - Create a branch  activate - Activate a branch  delete - Deletes a branch  list - Lists all branches on an engine.",
            "title": "Operations"
        },
        {
            "location": "/References/CLI_References/branch/index.html#options",
            "text": "Options are additional parameters that you can pass to a dxi command in order to modify the behavior of the operation.\nSome options are required, while others are not. The required options will be marked as [required] in the help information for an action.   Options  Detailed information on options coming soon. To view all options for an operation, run the following.\n  dxi branch <operation> --help",
            "title": "Options"
        },
        {
            "location": "/References/CLI_References/branch/index.html#access-help-information",
            "text": "At every step, you can access the help information for a dxi command as follows",
            "title": "Access Help Information"
        },
        {
            "location": "/References/CLI_References/branch/index.html#access-help-info-for-the-dxi-environment-command",
            "text": "dxi branch --help",
            "title": "Access help info for the dxi environment command"
        },
        {
            "location": "/References/CLI_References/branch/index.html#access-help-info-for-a-specific-dxi-environment-action",
            "text": "dxi branch <operation> --help",
            "title": "Access help info for a specific dxi environment action"
        },
        {
            "location": "/References/Library_References/environment/index.html",
            "text": "DXIEnvironment\n\u00b6\n\n\nAn Environment in Delphix is a Windows/ Linux / Unix Host that has been linked to Delphix. \nAn Environment may be a Source Host or Staging Host or Target Host.\n\n\nThis class provides methods for commonly used environment related operations.\n\n\nHow to import\n\u00b6\n\n\nfrom\n \ndxi.environment.dxi_environment\n \nimport\n \nDXIEnvironment\n\n\nfrom\n \ndxi.environment.dxi_environment\n \nimport\n  \nEnvironmentConstants\n\n\n\n\nCreate object\n\u00b6\n\n\n   obj = DXIEnvironment() \n\n\n\nClasses\n\u00b6\n\n\n    \nclass\n \nEnvironmentConstants\n:\n\n        \n\"\"\"\n\n\n        Define constants for Environment operations\n\n\n        \"\"\"\n\n\n        \nSINGLE_THREAD\n \n=\n \nFalse\n\n        \nPOLL\n \n=\n \n20\n\n        \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n        \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_environment.log\"\n\n        \nENGINE_ID\n \n=\n \n\"default\"\n\n        \nPARALLEL\n \n=\n \n5\n\n        \nTYPE\n \n=\n \nNone\n\n        \nACTION\n \n=\n \nNone\n\n        \nHOSTIP\n \n=\n \nNone\n\n        \nMODULE_NAME\n \n=\n \n__name__\n\n\n    \nclass\n \nDXIEnvironment\n:\n\n        \n\"\"\"\n\n\n        Perform an environment operation\n\n\n        \"\"\"\n\n\n        \ndef\n \n__init__\n(\n\n            \nself\n,\n\n            \nengine\n=\nEnvironmentConstants\n.\nENGINE_ID\n,\n\n            \nlog_file_path\n=\nEnvironmentConstants\n.\nLOG_FILE_PATH\n,\n\n            \nconfig_file\n=\nEnvironmentConstants\n.\nCONFIG\n,\n\n            \npoll\n=\nEnvironmentConstants\n.\nPOLL\n,\n\n            \nsingle_thread\n=\nEnvironmentConstants\n.\nSINGLE_THREAD\n,\n\n            \nparallel\n=\nEnvironmentConstants\n.\nPARALLEL\n,\n\n            \naction\n=\nEnvironmentConstants\n.\nACTION\n,\n\n            \nmodule_name\n=\nEnvironmentConstants\n.\nMODULE_NAME\n,\n\n        \n)\n\n\n\n\nMethods\n\u00b6\n\n\nMethods correspond to operations you can perform on the engine.   \n\n\nadd\n\u00b6\n\n\nTo add an environment on a engine.\n\n\nSignature\n\u00b6\n\n\ndef\n \nadd\n(\nself\n,\n \nenv_name\n=\nNone\n,\n \nenv_type\n=\nNone\n,\n \nhost_ip\n=\nNone\n,\n \ntoolkit_dir\n=\nNone\n,\n \nusername\n=\nNone\n,\n \npassword\n=\nNone\n,\n \nconnector_env_name\n=\nNone\n,\n \nase_db_username\n=\nNone\n,\n \nase_db_password\n=\nNone\n,)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nenv_name\n\n\nstr\n\n\nName of the environment in Delphix\n\n\nNone\n\n\n\n\n\n\nenv_type\n\n\nstr\n\n\nType of the environment [ unix or windows ]\n\n\nNone\n\n\n\n\n\n\nhost_ip\n\n\nstr\n\n\nIP address or Hostname of the environment\n\n\nNone\n\n\n\n\n\n\ntoolkit_dir\n\n\nstr\n\n\nDirectory on the Unix/Linux environment to download Delphix Toolkit\n\n\nNone\n\n\n\n\n\n\nusername\n\n\nstr\n\n\nDelphix OS user on the host environment\n\n\nNone\n\n\n\n\n\n\npassword\n\n\nstr\n\n\nDelphix OS user password\n\n\nNone\n\n\n\n\n\n\nconnector_env_name\n\n\nstr\n\n\nName of the environment on which Windows connector is installed and running\n\n\nNone\n\n\n\n\n\n\nase_db_username\n\n\nstr\n\n\nASE DB username\n\n\nNone\n\n\n\n\n\n\nase_db_password\n\n\nstr\n\n\nASE DB user's password\n\n\nNone\n\n\n\n\n\n\n\n\ndelete\n\u00b6\n\n\nDelete an environment by name.\n\n\nSignature\n\u00b6\n\n\ndef\n \ndelete\n(\nself\n,\nenv_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nenv_name\n\n\nstr\n\n\nName of the environment in Delphix\n\n\nNone\n\n\n\n\n\n\n\n\nenable\n\u00b6\n\n\nEnable an environment by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nenable\n(\nself\n,\nenv_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nenv_name\n\n\nstr\n\n\nName of the environment in Delphix\n\n\nNone\n\n\n\n\n\n\n\n\ndisable\n\u00b6\n\n\nDisable an environment by name\n\n\nSignature\n\u00b6\n\n\ndef\n \ndisable\n(\nself\n,\nenv_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nenv_name\n\n\nstr\n\n\nName of the environment in Delphix\n\n\nNone\n\n\n\n\n\n\n\n\nlist\n\u00b6\n\n\nList all environments on an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \nlist\n(\nself\n)\n\n\n\n\nrefresh\n\u00b6\n\n\nRefresh an environment by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nrefresh\n(\nself\n,\nenv_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nenv_name\n\n\nstr\n\n\nName of the environment in Delphix\n\n\nNone\n\n\n\n\n\n\n\n\nupdatehost\n\u00b6\n\n\nUpdate an environment's IP address\n\n\nSignature\n\u00b6\n\n\ndef\n \nrefresh\n(\nself\n,\nold_host\n,\n \nnew_host\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nold_host\n\n\nstr\n\n\nOld IP Address of the environment to update\n\n\nNone\n\n\n\n\n\n\nnew_host\n\n\nstr\n\n\nNew IP or HostName of the environment\n\n\nNone",
            "title": "DXIEnvironment"
        },
        {
            "location": "/References/Library_References/environment/index.html#dxienvironment",
            "text": "An Environment in Delphix is a Windows/ Linux / Unix Host that has been linked to Delphix. \nAn Environment may be a Source Host or Staging Host or Target Host.  This class provides methods for commonly used environment related operations.",
            "title": "DXIEnvironment"
        },
        {
            "location": "/References/Library_References/environment/index.html#how-to-import",
            "text": "from   dxi.environment.dxi_environment   import   DXIEnvironment  from   dxi.environment.dxi_environment   import    EnvironmentConstants",
            "title": "How to import"
        },
        {
            "location": "/References/Library_References/environment/index.html#create-object",
            "text": "obj = DXIEnvironment()",
            "title": "Create object"
        },
        {
            "location": "/References/Library_References/environment/index.html#classes",
            "text": "class   EnvironmentConstants : \n         \"\"\"          Define constants for Environment operations          \"\"\" \n\n         SINGLE_THREAD   =   False \n         POLL   =   20 \n         CONFIG   =   \"config/dxtools.conf\" \n         LOG_FILE_PATH   =   \"logs/dxi_environment.log\" \n         ENGINE_ID   =   \"default\" \n         PARALLEL   =   5 \n         TYPE   =   None \n         ACTION   =   None \n         HOSTIP   =   None \n         MODULE_NAME   =   __name__ \n\n     class   DXIEnvironment : \n         \"\"\"          Perform an environment operation          \"\"\" \n\n         def   __init__ ( \n             self , \n             engine = EnvironmentConstants . ENGINE_ID , \n             log_file_path = EnvironmentConstants . LOG_FILE_PATH , \n             config_file = EnvironmentConstants . CONFIG , \n             poll = EnvironmentConstants . POLL , \n             single_thread = EnvironmentConstants . SINGLE_THREAD , \n             parallel = EnvironmentConstants . PARALLEL , \n             action = EnvironmentConstants . ACTION , \n             module_name = EnvironmentConstants . MODULE_NAME , \n         )",
            "title": "Classes"
        },
        {
            "location": "/References/Library_References/environment/index.html#methods",
            "text": "Methods correspond to operations you can perform on the engine.",
            "title": "Methods"
        },
        {
            "location": "/References/Library_References/environment/index.html#add",
            "text": "To add an environment on a engine.",
            "title": "add"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature",
            "text": "def   add ( self ,   env_name = None ,   env_type = None ,   host_ip = None ,   toolkit_dir = None ,   username = None ,   password = None ,   connector_env_name = None ,   ase_db_username = None ,   ase_db_password = None ,)",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#arguments",
            "text": "Argument  Type  Description  Default      env_name  str  Name of the environment in Delphix  None    env_type  str  Type of the environment [ unix or windows ]  None    host_ip  str  IP address or Hostname of the environment  None    toolkit_dir  str  Directory on the Unix/Linux environment to download Delphix Toolkit  None    username  str  Delphix OS user on the host environment  None    password  str  Delphix OS user password  None    connector_env_name  str  Name of the environment on which Windows connector is installed and running  None    ase_db_username  str  ASE DB username  None    ase_db_password  str  ASE DB user's password  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/environment/index.html#delete",
            "text": "Delete an environment by name.",
            "title": "delete"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature_1",
            "text": "def   delete ( self , env_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#arguments_1",
            "text": "Argument  Type  Description  Default      env_name  str  Name of the environment in Delphix  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/environment/index.html#enable",
            "text": "Enable an environment by name",
            "title": "enable"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature_2",
            "text": "def   enable ( self , env_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#arguments_2",
            "text": "Argument  Type  Description  Default      env_name  str  Name of the environment in Delphix  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/environment/index.html#disable",
            "text": "Disable an environment by name",
            "title": "disable"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature_3",
            "text": "def   disable ( self , env_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#arguments_3",
            "text": "Argument  Type  Description  Default      env_name  str  Name of the environment in Delphix  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/environment/index.html#list",
            "text": "List all environments on an engine",
            "title": "list"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature_4",
            "text": "def   list ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#refresh",
            "text": "Refresh an environment by name",
            "title": "refresh"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature_5",
            "text": "def   refresh ( self , env_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#arguments_4",
            "text": "Argument  Type  Description  Default      env_name  str  Name of the environment in Delphix  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/environment/index.html#updatehost",
            "text": "Update an environment's IP address",
            "title": "updatehost"
        },
        {
            "location": "/References/Library_References/environment/index.html#signature_6",
            "text": "def   refresh ( self , old_host ,   new_host )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/environment/index.html#arguments_5",
            "text": "Argument  Type  Description  Default      old_host  str  Old IP Address of the environment to update  None    new_host  str  New IP or HostName of the environment  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/database/index.html",
            "text": "DXIDBOperations\n\u00b6\n\n\nA Database refers to any dataset in Delphix.\n\nA Database can be a source (dsource), staging or virtual (vdb or vfiles)\n\n\nThis class provides methods to trigger some of the most commonly used VDB related operations.\n\n\nDelete VDB:\n\u00b6\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.database.dxi_delete\n \nimport\n \nDeleteConstants\n\n\nfrom\n \ndxi.database.dxi_delete\n \nimport\n \nDXIDelete\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIDelete() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nDeleteConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for Delete Class and CLI Usage\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_delete.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nNAME\n \n=\n \nNone\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nFORCE\n \n=\n \nFalse\n\n    \nTYPE\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n\n\n\nclass\n \nDXIDelete\n:\n\n    \n\"\"\"\n\n\n    Deletes a VDB or a list of VDBs from an engine\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nname\n=\nDeleteConstants\n.\nNAME\n,\n\n        \ntype\n=\nDeleteConstants\n.\nTYPE\n,\n\n        \nforce\n=\nDeleteConstants\n.\nFORCE\n,\n\n        \nparallel\n=\nDeleteConstants\n.\nPARALLEL\n,\n\n        \nengine\n=\nDeleteConstants\n.\nENGINE_ID\n,\n\n        \npoll\n=\nDeleteConstants\n.\nPOLL\n,\n\n        \nconfig\n=\nDeleteConstants\n.\nCONFIG\n,\n\n        \nlog_file_path\n=\nDeleteConstants\n.\nLOG_FILE_PATH\n,\n\n        \nsingle_thread\n=\nDeleteConstants\n.\nSINGLE_THREAD\n,\n\n        \nmodule_name\n=\nDeleteConstants\n.\nMODULE_NAME\n,\n\n    \n):\n\n\n\n\ndelete_db\n\u00b6\n\n\nDeletes the list of vdb objects\n\n\nSignature\n\u00b6\n\n\ndef\n \ndelete_db\n(\nself\n)\n\n\n\n\nRefresh VDB:\n\u00b6\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.database.dxi_refresh\n \nimport\n \nVDBRefreshConstants\n\n\nfrom\n \ndxi.database.dxi_refresh\n \nimport\n \nDXIRefresh\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIRefresh() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nVDBRefreshConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for VDBRefresh class and CLI usage\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_refresh.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nTIME_STAMP_TYPE\n \n=\n \n(\n\"SNAPSHOT\"\n,)\n\n    \nTIME_STAMP\n \n=\n \n\"LATEST\"\n\n    \nTIME_FLOW\n \n=\n \nNone\n\n    \nPARALLEL\n \n=\n \n5\n\n\n\n\nclass\n \nDXIRefresh\n:\n\n    \n\"\"\"\n\n\n    Refresh a Delphix VDB\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nname\n,\n\n        \ntime_stamp_type\n=\nVDBRefreshConstants\n.\nTIME_STAMP_TYPE\n,\n\n        \ntime_stamp\n=\nVDBRefreshConstants\n.\nTIME_STAMP\n,\n\n        \ntime_flow\n=\nVDBRefreshConstants\n.\nTIME_FLOW\n,\n\n        \nengine\n=\nVDBRefreshConstants\n.\nENGINE_ID\n,\n\n        \nsingle_thread\n=\nVDBRefreshConstants\n.\nSINGLE_THREAD\n,\n\n        \npoll\n=\nVDBRefreshConstants\n.\nPOLL\n,\n\n        \nconfig\n=\nVDBRefreshConstants\n.\nCONFIG\n,\n\n        \nlog_file_path\n=\nVDBRefreshConstants\n.\nLOG_FILE_PATH\n,\n\n        \nparallel\n=\nVDBRefreshConstants\n.\nPARALLEL\n,\n\n    \n):\n\n\n\n\nrefresh\n\u00b6\n\n\nRefresh a Delphix VDB\n\n\nSignature\n\u00b6\n\n\ndef\n \nrefresh\n(\nself\n)\n\n\n\n\nRewind VDB:\n\u00b6\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.database.dxi_rewind\n \nimport\n \nDXIRewind\n\n\nfrom\n \ndxi.database.dxi_rewind\n \nimport\n \nVDBRewindConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIRewind() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nVDBRewindConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for VDBRefresh class and CLI usage\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dx_rewind.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nTIME_STAMP_TYPE\n \n=\n \n\"SNAPSHOT\"\n\n    \nTIME_STAMP\n \n=\n \n\"LATEST\"\n\n    \nDB_TYPE\n \n=\n \nNone\n\n    \nPARALLEL\n \n=\n \n5\n\n\n\n\nclass\n \nDXIRewind\n:\n\n    \n\"\"\"\n\n\n    Refresh a Delphix VDB\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nname\n,\n\n        \ntime_stamp_type\n=\nVDBRewindConstants\n.\nTIME_STAMP_TYPE\n,\n\n        \ntime_stamp\n=\nVDBRewindConstants\n.\nTIME_STAMP\n,\n\n        \ndatabase_type\n=\nVDBRewindConstants\n.\nDB_TYPE\n,\n\n        \nengine\n=\nVDBRewindConstants\n.\nENGINE_ID\n,\n\n        \nsingle_thread\n=\nVDBRewindConstants\n.\nSINGLE_THREAD\n,\n\n        \npoll\n=\nVDBRewindConstants\n.\nPOLL\n,\n\n        \nconfig\n=\nVDBRewindConstants\n.\nCONFIG\n,\n\n        \nlog_file_path\n=\nVDBRewindConstants\n.\nLOG_FILE_PATH\n,\n\n        \nparallel\n=\nVDBRewindConstants\n.\nPARALLEL\n,\n\n    \n):\n\n\n\n\nrewind\n\u00b6\n\n\nRewind a VDB object\n\n\nSignature\n\u00b6\n\n\ndef\n \nrewind\n(\nself\n)\n\n\n\n\nProvision VDB:\n\u00b6\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.database.dxi_provisionvdb\n \nimport\n \nDXIProvisionVDB\n\n\nfrom\n \ndxi.database.dxi_provisionvdb\n \nimport\n \nProvisionVDBConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIProvisionVDB() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nProvisionVDBConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Class of common constants used by Provision VDB\n\n\n    \"\"\"\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n10\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_provisionvdb.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nACTION\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n    \nVDB_LIST_HEADER\n \n=\n \n[]\n\n    \nFORCE\n \n=\n \nFalse\n\n\n\n\nclass\n \nDXIProvisionVDB\n:\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nNone\n,\n\n        \nlog_file_path\n=\nProvisionVDBConstants\n.\nLOG_FILE_PATH\n,\n\n        \nconfig\n=\nProvisionVDBConstants\n.\nCONFIG\n,\n\n        \npoll\n=\nProvisionVDBConstants\n.\nPOLL\n,\n\n        \nsingle_thread\n=\nProvisionVDBConstants\n.\nSINGLE_THREAD\n,\n\n        \nparallel\n=\nProvisionVDBConstants\n.\nPARALLEL\n,\n\n        \naction\n=\nProvisionVDBConstants\n.\nACTION\n,\n\n        \nmodule_name\n=\nProvisionVDBConstants\n.\nMODULE_NAME\n,\n\n        \nsource_db\n=\nNone\n,\n\n        \ndb\n=\nNone\n,\n\n        \ndb_type\n=\nNone\n,\n\n        \ntarget_grp\n=\nNone\n,\n\n        \nenv_name\n=\nNone\n,\n\n        \nmntpoint\n=\nNone\n,\n\n        \ntimestamp\n=\nNone\n,\n\n        \ntimestamp_type\n=\nNone\n,\n\n        \nprerefresh\n=\nNone\n,\n\n        \npostrefresh\n=\nNone\n,\n\n        \nprerollback\n=\nNone\n,\n\n        \npostrollback\n=\nNone\n,\n\n        \nconfigure_clone\n=\nNone\n,\n\n        \nenvinst\n=\nNone\n,\n\n        \nversion\n=\nFalse\n,\n\n    \n):\n\n\n\n\nexecute\n\u00b6\n\n\nProvision Delphix Virtual Databases\n\n\nSignature\n\u00b6\n\n\ndef\n \nexecute\n(\nself\n)\n\n\n\n\nProvision dSource:\n\u00b6\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.database.dxi_provisiondsource\n \nimport\n \nDXIProvisionDsource\n\n\nfrom\n \ndxi.database.dxi_provisiondsource\n \nimport\n \nProvisionDsourceConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIProvisionDsource() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nProvisionVDBConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Class of common constants used by Provision VDB\n\n\n    \"\"\"\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n10\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_provisionvdb.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nACTION\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n    \nVDB_LIST_HEADER\n \n=\n \n[]\n\n    \nFORCE\n \n=\n \nFalse\n\n\n\n\nclass\n \nDXIProvisionVDB\n:\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nNone\n,\n\n        \nlog_file_path\n=\nProvisionVDBConstants\n.\nLOG_FILE_PATH\n,\n\n        \nconfig\n=\nProvisionVDBConstants\n.\nCONFIG\n,\n\n        \npoll\n=\nProvisionVDBConstants\n.\nPOLL\n,\n\n        \nsingle_thread\n=\nProvisionVDBConstants\n.\nSINGLE_THREAD\n,\n\n        \nparallel\n=\nProvisionVDBConstants\n.\nPARALLEL\n,\n\n        \naction\n=\nProvisionVDBConstants\n.\nACTION\n,\n\n        \nmodule_name\n=\nProvisionVDBConstants\n.\nMODULE_NAME\n,\n\n        \nsource_db\n=\nNone\n,\n\n        \ndb\n=\nNone\n,\n\n        \ndb_type\n=\nNone\n,\n\n        \ntarget_grp\n=\nNone\n,\n\n        \nenv_name\n=\nNone\n,\n\n        \nmntpoint\n=\nNone\n,\n\n        \ntimestamp\n=\nNone\n,\n\n        \ntimestamp_type\n=\nNone\n,\n\n        \nprerefresh\n=\nNone\n,\n\n        \npostrefresh\n=\nNone\n,\n\n        \nprerollback\n=\nNone\n,\n\n        \npostrollback\n=\nNone\n,\n\n        \nconfigure_clone\n=\nNone\n,\n\n        \nenvinst\n=\nNone\n,\n\n        \nversion\n=\nFalse\n,\n\n    \n):\n\n\n\n\nexecute\n\u00b6\n\n\nCreate and sync a dSource\n\n\nSignature\n\u00b6\n\n\ndef\n \nexecute\n(\nself\n)\n\n\n\n\nList all VDBs, start, stop, enable, disable a VDB\n\u00b6\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.database.dxi_dboperations\n \nimport\n \nDXIDBOperations\n\n\nfrom\n \ndxi.database.dxi_dboperations\n \nimport\n \nDXIDBOperationsConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIDBOperations() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nDXIDBOperationsConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Class of common constants used by DB Operations\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_dboperations.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nACTION\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n    \nVDB_LIST_HEADER\n \n=\n \n[]\n\n    \nFORCE\n \n=\n \nFalse\n\n\n\n\nclass\n \nDXIDBOperations\n:\n\n    \n\"\"\"\n\n\n    Delphix Integration class for comman DB Operations\n\n\n\n    This class contains all methods to perform the following \\\n\n\n    operations on datasets\n\n\n    Virtual Operations: Start | Stop | Enable | Disable\n\n\n    Source Operations: Link | Unlink\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nDXIDBOperationsConstants\n.\nENGINE_ID\n,\n\n        \nlog_file_path\n=\nDXIDBOperationsConstants\n.\nLOG_FILE_PATH\n,\n\n        \nconfig_file\n=\nDXIDBOperationsConstants\n.\nCONFIG\n,\n\n        \npoll\n=\nDXIDBOperationsConstants\n.\nPOLL\n,\n\n        \nsingle_thread\n=\nDXIDBOperationsConstants\n.\nSINGLE_THREAD\n,\n\n        \nparallel\n=\nDXIDBOperationsConstants\n.\nPARALLEL\n,\n\n        \naction\n=\nDXIDBOperationsConstants\n.\nACTION\n,\n\n        \nmodule_name\n=\nDXIDBOperationsConstants\n.\nMODULE_NAME\n,\n\n    \n):\n\n\n\n\nDisable VDB:\n\u00b6\n\n\nDisable a Virtual dataset by name\n\n\nSignature\n\u00b6\n\n\ndef\n \ndisable\n(\nself\n,\n \nname\n,\n \ngroup\n=\nNone\n,\n \nforce\n=\nFalse\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the virtual dataset to disable\n\n\nNone\n\n\n\n\n\n\ngroup\n\n\nstr\n\n\nGroup where the dataset resides\n\n\nNone\n\n\n\n\n\n\nforce\n\n\nbool\n\n\nForce disable a virtual dataset\n\n\nFalse\n\n\n\n\n\n\n\n\nEnable VDB:\n\u00b6\n\n\nDisable a Virtual dataset by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nenable\n(\nself\n,\n \nname\n,\n \ngroup\n=\nNone\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the virtual dataset to enable\n\n\nNone\n\n\n\n\n\n\ngroup\n\n\nstr\n\n\nGroup where the dataset resides\n\n\nNone\n\n\n\n\n\n\n\n\nList VDB data-sets:\n\u00b6\n\n\nList datasets on an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \nlist\n(\nself\n)\n\n\n\n\nStart VDB:\n\u00b6\n\n\nStart a Virtual dataset by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nstart\n(\nself\n,\n \nname\n,\n \ngroup\n=\nNone\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the virtual dataset to start\n\n\nNone\n\n\n\n\n\n\ngroup\n\n\nstr\n\n\nGroup where the dataset resides\n\n\nNone\n\n\n\n\n\n\n\n\nStop VDB:\n\u00b6\n\n\nStop a Virtual dataset by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nstop\n(\nself\n,\n \nname\n,\n \ngroup\n=\nNone\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the virtual dataset to stop\n\n\nNone\n\n\n\n\n\n\ngroup\n\n\nstr\n\n\nGroup where the dataset resides\n\n\nNone",
            "title": "DXIDBOperations"
        },
        {
            "location": "/References/Library_References/database/index.html#dxidboperations",
            "text": "A Database refers to any dataset in Delphix. \nA Database can be a source (dsource), staging or virtual (vdb or vfiles)  This class provides methods to trigger some of the most commonly used VDB related operations.",
            "title": "DXIDBOperations"
        },
        {
            "location": "/References/Library_References/database/index.html#delete-vdb",
            "text": "",
            "title": "Delete VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#how-to-import",
            "text": "from   dxi.database.dxi_delete   import   DeleteConstants  from   dxi.database.dxi_delete   import   DXIDelete",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/database/index.html#create-object",
            "text": "obj = DXIDelete()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/database/index.html#classes",
            "text": "class   DeleteConstants ( object ): \n     \"\"\"      Define constants for Delete Class and CLI Usage      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_delete.log\" \n     ENGINE_ID   =   \"default\" \n     NAME   =   None \n     PARALLEL   =   5 \n     FORCE   =   False \n     TYPE   =   None \n     MODULE_NAME   =   __name__  class   DXIDelete : \n     \"\"\"      Deletes a VDB or a list of VDBs from an engine      \"\"\" \n\n     def   __init__ ( \n         self , \n         name = DeleteConstants . NAME , \n         type = DeleteConstants . TYPE , \n         force = DeleteConstants . FORCE , \n         parallel = DeleteConstants . PARALLEL , \n         engine = DeleteConstants . ENGINE_ID , \n         poll = DeleteConstants . POLL , \n         config = DeleteConstants . CONFIG , \n         log_file_path = DeleteConstants . LOG_FILE_PATH , \n         single_thread = DeleteConstants . SINGLE_THREAD , \n         module_name = DeleteConstants . MODULE_NAME , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/database/index.html#delete_db",
            "text": "Deletes the list of vdb objects",
            "title": "delete_db"
        },
        {
            "location": "/References/Library_References/database/index.html#signature",
            "text": "def   delete_db ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#refresh-vdb",
            "text": "",
            "title": "Refresh VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#how-to-import_1",
            "text": "from   dxi.database.dxi_refresh   import   VDBRefreshConstants  from   dxi.database.dxi_refresh   import   DXIRefresh",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/database/index.html#create-object_1",
            "text": "obj = DXIRefresh()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/database/index.html#classes_1",
            "text": "class   VDBRefreshConstants ( object ): \n     \"\"\"      Define constants for VDBRefresh class and CLI usage      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_refresh.log\" \n     ENGINE_ID   =   \"default\" \n     TIME_STAMP_TYPE   =   ( \"SNAPSHOT\" ,) \n     TIME_STAMP   =   \"LATEST\" \n     TIME_FLOW   =   None \n     PARALLEL   =   5  class   DXIRefresh : \n     \"\"\"      Refresh a Delphix VDB      \"\"\" \n\n     def   __init__ ( \n         self , \n         name , \n         time_stamp_type = VDBRefreshConstants . TIME_STAMP_TYPE , \n         time_stamp = VDBRefreshConstants . TIME_STAMP , \n         time_flow = VDBRefreshConstants . TIME_FLOW , \n         engine = VDBRefreshConstants . ENGINE_ID , \n         single_thread = VDBRefreshConstants . SINGLE_THREAD , \n         poll = VDBRefreshConstants . POLL , \n         config = VDBRefreshConstants . CONFIG , \n         log_file_path = VDBRefreshConstants . LOG_FILE_PATH , \n         parallel = VDBRefreshConstants . PARALLEL , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/database/index.html#refresh",
            "text": "Refresh a Delphix VDB",
            "title": "refresh"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_1",
            "text": "def   refresh ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#rewind-vdb",
            "text": "",
            "title": "Rewind VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#how-to-import_2",
            "text": "from   dxi.database.dxi_rewind   import   DXIRewind  from   dxi.database.dxi_rewind   import   VDBRewindConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/database/index.html#create-object_2",
            "text": "obj = DXIRewind()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/database/index.html#classes_2",
            "text": "class   VDBRewindConstants ( object ): \n     \"\"\"      Define constants for VDBRefresh class and CLI usage      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dx_rewind.log\" \n     ENGINE_ID   =   \"default\" \n     TIME_STAMP_TYPE   =   \"SNAPSHOT\" \n     TIME_STAMP   =   \"LATEST\" \n     DB_TYPE   =   None \n     PARALLEL   =   5  class   DXIRewind : \n     \"\"\"      Refresh a Delphix VDB      \"\"\" \n\n     def   __init__ ( \n         self , \n         name , \n         time_stamp_type = VDBRewindConstants . TIME_STAMP_TYPE , \n         time_stamp = VDBRewindConstants . TIME_STAMP , \n         database_type = VDBRewindConstants . DB_TYPE , \n         engine = VDBRewindConstants . ENGINE_ID , \n         single_thread = VDBRewindConstants . SINGLE_THREAD , \n         poll = VDBRewindConstants . POLL , \n         config = VDBRewindConstants . CONFIG , \n         log_file_path = VDBRewindConstants . LOG_FILE_PATH , \n         parallel = VDBRewindConstants . PARALLEL , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/database/index.html#rewind",
            "text": "Rewind a VDB object",
            "title": "rewind"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_2",
            "text": "def   rewind ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#provision-vdb",
            "text": "",
            "title": "Provision VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#how-to-import_3",
            "text": "from   dxi.database.dxi_provisionvdb   import   DXIProvisionVDB  from   dxi.database.dxi_provisionvdb   import   ProvisionVDBConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/database/index.html#create-object_3",
            "text": "obj = DXIProvisionVDB()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/database/index.html#classes_3",
            "text": "class   ProvisionVDBConstants ( object ): \n     \"\"\"      Class of common constants used by Provision VDB      \"\"\" \n     SINGLE_THREAD   =   False \n     POLL   =   10 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_provisionvdb.log\" \n     ENGINE_ID   =   \"default\" \n     PARALLEL   =   5 \n     ACTION   =   None \n     MODULE_NAME   =   __name__ \n     VDB_LIST_HEADER   =   [] \n     FORCE   =   False  class   DXIProvisionVDB : \n     def   __init__ ( \n         self , \n         engine = None , \n         log_file_path = ProvisionVDBConstants . LOG_FILE_PATH , \n         config = ProvisionVDBConstants . CONFIG , \n         poll = ProvisionVDBConstants . POLL , \n         single_thread = ProvisionVDBConstants . SINGLE_THREAD , \n         parallel = ProvisionVDBConstants . PARALLEL , \n         action = ProvisionVDBConstants . ACTION , \n         module_name = ProvisionVDBConstants . MODULE_NAME , \n         source_db = None , \n         db = None , \n         db_type = None , \n         target_grp = None , \n         env_name = None , \n         mntpoint = None , \n         timestamp = None , \n         timestamp_type = None , \n         prerefresh = None , \n         postrefresh = None , \n         prerollback = None , \n         postrollback = None , \n         configure_clone = None , \n         envinst = None , \n         version = False , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/database/index.html#execute",
            "text": "Provision Delphix Virtual Databases",
            "title": "execute"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_3",
            "text": "def   execute ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#provision-dsource",
            "text": "",
            "title": "Provision dSource:"
        },
        {
            "location": "/References/Library_References/database/index.html#how-to-import_4",
            "text": "from   dxi.database.dxi_provisiondsource   import   DXIProvisionDsource  from   dxi.database.dxi_provisiondsource   import   ProvisionDsourceConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/database/index.html#create-object_4",
            "text": "obj = DXIProvisionDsource()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/database/index.html#classes_4",
            "text": "class   ProvisionVDBConstants ( object ): \n     \"\"\"      Class of common constants used by Provision VDB      \"\"\" \n     SINGLE_THREAD   =   False \n     POLL   =   10 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_provisionvdb.log\" \n     ENGINE_ID   =   \"default\" \n     PARALLEL   =   5 \n     ACTION   =   None \n     MODULE_NAME   =   __name__ \n     VDB_LIST_HEADER   =   [] \n     FORCE   =   False  class   DXIProvisionVDB : \n     def   __init__ ( \n         self , \n         engine = None , \n         log_file_path = ProvisionVDBConstants . LOG_FILE_PATH , \n         config = ProvisionVDBConstants . CONFIG , \n         poll = ProvisionVDBConstants . POLL , \n         single_thread = ProvisionVDBConstants . SINGLE_THREAD , \n         parallel = ProvisionVDBConstants . PARALLEL , \n         action = ProvisionVDBConstants . ACTION , \n         module_name = ProvisionVDBConstants . MODULE_NAME , \n         source_db = None , \n         db = None , \n         db_type = None , \n         target_grp = None , \n         env_name = None , \n         mntpoint = None , \n         timestamp = None , \n         timestamp_type = None , \n         prerefresh = None , \n         postrefresh = None , \n         prerollback = None , \n         postrollback = None , \n         configure_clone = None , \n         envinst = None , \n         version = False , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/database/index.html#execute_1",
            "text": "Create and sync a dSource",
            "title": "execute"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_4",
            "text": "def   execute ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#list-all-vdbs-start-stop-enable-disable-a-vdb",
            "text": "",
            "title": "List all VDBs, start, stop, enable, disable a VDB"
        },
        {
            "location": "/References/Library_References/database/index.html#how-to-import_5",
            "text": "from   dxi.database.dxi_dboperations   import   DXIDBOperations  from   dxi.database.dxi_dboperations   import   DXIDBOperationsConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/database/index.html#create-object_5",
            "text": "obj = DXIDBOperations()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/database/index.html#classes_5",
            "text": "class   DXIDBOperationsConstants ( object ): \n     \"\"\"      Class of common constants used by DB Operations      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_dboperations.log\" \n     ENGINE_ID   =   \"default\" \n     PARALLEL   =   5 \n     ACTION   =   None \n     MODULE_NAME   =   __name__ \n     VDB_LIST_HEADER   =   [] \n     FORCE   =   False  class   DXIDBOperations : \n     \"\"\"      Delphix Integration class for comman DB Operations      This class contains all methods to perform the following \\      operations on datasets      Virtual Operations: Start | Stop | Enable | Disable      Source Operations: Link | Unlink      \"\"\" \n\n     def   __init__ ( \n         self , \n         engine = DXIDBOperationsConstants . ENGINE_ID , \n         log_file_path = DXIDBOperationsConstants . LOG_FILE_PATH , \n         config_file = DXIDBOperationsConstants . CONFIG , \n         poll = DXIDBOperationsConstants . POLL , \n         single_thread = DXIDBOperationsConstants . SINGLE_THREAD , \n         parallel = DXIDBOperationsConstants . PARALLEL , \n         action = DXIDBOperationsConstants . ACTION , \n         module_name = DXIDBOperationsConstants . MODULE_NAME , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/database/index.html#disable-vdb",
            "text": "Disable a Virtual dataset by name",
            "title": "Disable VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_5",
            "text": "def   disable ( self ,   name ,   group = None ,   force = False )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#arguments",
            "text": "Argument  Type  Description  Default      name  str  Name of the virtual dataset to disable  None    group  str  Group where the dataset resides  None    force  bool  Force disable a virtual dataset  False",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/database/index.html#enable-vdb",
            "text": "Disable a Virtual dataset by name",
            "title": "Enable VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_6",
            "text": "def   enable ( self ,   name ,   group = None )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#arguments_1",
            "text": "Argument  Type  Description  Default      name  str  Name of the virtual dataset to enable  None    group  str  Group where the dataset resides  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/database/index.html#list-vdb-data-sets",
            "text": "List datasets on an engine",
            "title": "List VDB data-sets:"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_7",
            "text": "def   list ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#start-vdb",
            "text": "Start a Virtual dataset by name",
            "title": "Start VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_8",
            "text": "def   start ( self ,   name ,   group = None )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#arguments_2",
            "text": "Argument  Type  Description  Default      name  str  Name of the virtual dataset to start  None    group  str  Group where the dataset resides  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/database/index.html#stop-vdb",
            "text": "Stop a Virtual dataset by name",
            "title": "Stop VDB:"
        },
        {
            "location": "/References/Library_References/database/index.html#signature_9",
            "text": "def   stop ( self ,   name ,   group = None )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/database/index.html#arguments_3",
            "text": "Argument  Type  Description  Default      name  str  Name of the virtual dataset to stop  None    group  str  Group where the dataset resides  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/snapshot/index.html",
            "text": "DXISnapshot\n\u00b6\n\n\nSnapshots represent points in time where a sync operation has occurred on either a dSource or VDB.\nThis class provides methods for commonly used snapshot related operations.\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.snapshot.dxi_snapshot\n \nimport\n \nDXISnapshot\n\n\nfrom\n \ndxi.snapshot.dxi_snapshot\n \nimport\n \nSnapshotConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXISnapshot() \n\n\n\nClasses:\n\u00b6\n\n\n  \nclass\n \nSnapshotConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for Snapshot class and CLI usage\n\n\n    \"\"\"\n\n\n    \nALL_DBS\n \n=\n \nFalse\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dx_snapshot_db.log\"\n\n    \nBCK_FILE\n \n=\n \nNone\n\n    \nUSE_BACKUP\n \n=\n \nFalse\n\n    \nCREATE_BACKUP\n \n=\n \nFalse\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nNAME\n \n=\n \nNone\n\n    \nGROUP\n \n=\n \nNone\n\n    \nPARALLEL\n \n=\n \n5\n\n\n\n\nclass\n \nDXISnapshot\n:\n\n    \n\"\"\"\n\n\n    Create a snapshot a dSource or VDB\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nname\n=\nSnapshotConstants\n.\nNAME\n,\n\n        \ngroup\n=\nSnapshotConstants\n.\nGROUP\n,\n\n        \nparallel\n=\nSnapshotConstants\n.\nPARALLEL\n,\n\n        \nengine\n=\nSnapshotConstants\n.\nENGINE_ID\n,\n\n        \npoll\n=\nSnapshotConstants\n.\nPOLL\n,\n\n        \nconfig\n=\nSnapshotConstants\n.\nCONFIG\n,\n\n        \nlog_file_path\n=\nSnapshotConstants\n.\nLOG_FILE_PATH\n,\n\n        \nall_dbs\n=\nSnapshotConstants\n.\nALL_DBS\n,\n\n        \nsingle_thread\n=\nSnapshotConstants\n.\nSINGLE_THREAD\n,\n\n    \n)\n\n\n\n\nMethods:\n\u00b6\n\n\nMethods correspond to operations you can perform on the snapshot of dSource or VDB.   \n\n\ncreate_snapshot\n\u00b6\n\n\nTo add an environment on a engine.\n\n\nSignature\n\u00b6\n\n\ndef\n \ncreate_snapshot\n(\nself\n,\n \nusebackup\n=\nFalse\n,\n \ncreate_bckup\n=\nFalse\n,\n \nbck_file\n=\nNone\n):\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusebackup\n\n\nbool\n\n\nSnapshot using \"Most Recent backup\"\n\n\nFalse\n\n\n\n\n\n\ncreate_bckup\n\n\nbool\n\n\nCreate and ingest a new Sybase backup or copy-only MS SQL backup\n\n\nFalse\n\n\n\n\n\n\nbck_file\n\n\nstr\n\n\nName of the specific ASE Sybase backup file(s)\n\n\nNone",
            "title": "DXISnapshot"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#dxisnapshot",
            "text": "Snapshots represent points in time where a sync operation has occurred on either a dSource or VDB.\nThis class provides methods for commonly used snapshot related operations.",
            "title": "DXISnapshot"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#how-to-import",
            "text": "from   dxi.snapshot.dxi_snapshot   import   DXISnapshot  from   dxi.snapshot.dxi_snapshot   import   SnapshotConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#create-object",
            "text": "obj = DXISnapshot()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#classes",
            "text": "class   SnapshotConstants ( object ): \n     \"\"\"      Define constants for Snapshot class and CLI usage      \"\"\" \n\n     ALL_DBS   =   False \n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dx_snapshot_db.log\" \n     BCK_FILE   =   None \n     USE_BACKUP   =   False \n     CREATE_BACKUP   =   False \n     ENGINE_ID   =   \"default\" \n     NAME   =   None \n     GROUP   =   None \n     PARALLEL   =   5  class   DXISnapshot : \n     \"\"\"      Create a snapshot a dSource or VDB      \"\"\" \n\n     def   __init__ ( \n         self , \n         name = SnapshotConstants . NAME , \n         group = SnapshotConstants . GROUP , \n         parallel = SnapshotConstants . PARALLEL , \n         engine = SnapshotConstants . ENGINE_ID , \n         poll = SnapshotConstants . POLL , \n         config = SnapshotConstants . CONFIG , \n         log_file_path = SnapshotConstants . LOG_FILE_PATH , \n         all_dbs = SnapshotConstants . ALL_DBS , \n         single_thread = SnapshotConstants . SINGLE_THREAD , \n     )",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#methods",
            "text": "Methods correspond to operations you can perform on the snapshot of dSource or VDB.",
            "title": "Methods:"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#create_snapshot",
            "text": "To add an environment on a engine.",
            "title": "create_snapshot"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#signature",
            "text": "def   create_snapshot ( self ,   usebackup = False ,   create_bckup = False ,   bck_file = None ):",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/snapshot/index.html#arguments",
            "text": "Argument  Type  Description  Default      usebackup  bool  Snapshot using \"Most Recent backup\"  False    create_bckup  bool  Create and ingest a new Sybase backup or copy-only MS SQL backup  False    bck_file  str  Name of the specific ASE Sybase backup file(s)  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/template/index.html",
            "text": "DXITemplate\n\u00b6\n\n\nA Template (Self Service Template) refers to a blueprint to create Self Service containers in Delphix.\n\n\nIt provides methods for all Self Service Template related operations.\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.template.dxi_template\n \nimport\n \nDXITemplate\n\n\nfrom\n \ndxi.template.dxi_template\n \nimport\n \nDXITemplateConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXITemplate() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nDXITemplateConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for Self Service Template Class & CLI\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_template.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nACTION\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n    \nLIST_HEADER\n \n=\n \n[\n\"Name\"\n,\n \n\"Reference\"\n,\n \n\"Active Branch\"\n,\n \n\"Last Updated\"\n]\n\n\n\n\nclass\n \nDXITemplate\n:\n\n    \n\"\"\"\n\n\n    Class for Self Service Template Operations\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nDXITemplateConstants\n.\nENGINE_ID\n,\n\n        \nsingle_thread\n=\nDXITemplateConstants\n.\nSINGLE_THREAD\n,\n\n        \nconfig\n=\nDXITemplateConstants\n.\nCONFIG\n,\n\n        \nlog_file_path\n=\nDXITemplateConstants\n.\nLOG_FILE_PATH\n,\n\n        \npoll\n=\nDXITemplateConstants\n.\nPOLL\n,\n\n        \naction\n=\nDXITemplateConstants\n.\nACTION\n,\n\n    \n):\n\n\n\n\nMethods:\n\u00b6\n\n\nMethod for all Self Service Template related operations.  \n\n\ncreate\n\u00b6\n\n\nCreate a template on an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \ncreate\n(\nself\n,\n \ntemplate_name\n,\n \ndbnames\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the template to create\n\n\nNone\n\n\n\n\n\n\ndbnames\n\n\nstr\n\n\nList of datasource names, separated by \":' (Sample oraclesrc1:sqlsrc1 )\n\n\nNone\n\n\n\n\n\n\n\n\nlist\n\u00b6\n\n\nList all templates on an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \nlist\n(\nself\n)\n\n\n\n\ndelete\n\u00b6\n\n\nDelete a template from an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \ndelete\n(\nself\n,\n \ntemplate_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the template to delete\n\n\nNone",
            "title": "DXITemplate"
        },
        {
            "location": "/References/Library_References/template/index.html#dxitemplate",
            "text": "A Template (Self Service Template) refers to a blueprint to create Self Service containers in Delphix.  It provides methods for all Self Service Template related operations.",
            "title": "DXITemplate"
        },
        {
            "location": "/References/Library_References/template/index.html#how-to-import",
            "text": "from   dxi.template.dxi_template   import   DXITemplate  from   dxi.template.dxi_template   import   DXITemplateConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/template/index.html#create-object",
            "text": "obj = DXITemplate()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/template/index.html#classes",
            "text": "class   DXITemplateConstants ( object ): \n     \"\"\"      Define constants for Self Service Template Class & CLI      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_template.log\" \n     ENGINE_ID   =   \"default\" \n     PARALLEL   =   5 \n     ACTION   =   None \n     MODULE_NAME   =   __name__ \n     LIST_HEADER   =   [ \"Name\" ,   \"Reference\" ,   \"Active Branch\" ,   \"Last Updated\" ]  class   DXITemplate : \n     \"\"\"      Class for Self Service Template Operations      \"\"\" \n\n     def   __init__ ( \n         self , \n         engine = DXITemplateConstants . ENGINE_ID , \n         single_thread = DXITemplateConstants . SINGLE_THREAD , \n         config = DXITemplateConstants . CONFIG , \n         log_file_path = DXITemplateConstants . LOG_FILE_PATH , \n         poll = DXITemplateConstants . POLL , \n         action = DXITemplateConstants . ACTION , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/template/index.html#methods",
            "text": "Method for all Self Service Template related operations.",
            "title": "Methods:"
        },
        {
            "location": "/References/Library_References/template/index.html#create",
            "text": "Create a template on an engine",
            "title": "create"
        },
        {
            "location": "/References/Library_References/template/index.html#signature",
            "text": "def   create ( self ,   template_name ,   dbnames )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/template/index.html#arguments",
            "text": "Argument  Type  Description  Default      template_name  str  Name of the template to create  None    dbnames  str  List of datasource names, separated by \":' (Sample oraclesrc1:sqlsrc1 )  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/template/index.html#list",
            "text": "List all templates on an engine",
            "title": "list"
        },
        {
            "location": "/References/Library_References/template/index.html#signature_1",
            "text": "def   list ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/template/index.html#delete",
            "text": "Delete a template from an engine",
            "title": "delete"
        },
        {
            "location": "/References/Library_References/template/index.html#signature_2",
            "text": "def   delete ( self ,   template_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/template/index.html#arguments_1",
            "text": "Argument  Type  Description  Default      template_name  str  Name of the template to delete  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html",
            "text": "DXIContainer\n\u00b6\n\n\nA Container (Self Service Container) in Delphix refers to set of Virtual Datasets.\nthat are grouped together and can be operated on as a single unit through Delphix Self Service.\n\n\nThis class provides methods to trigger some of the most commonly used container related operations.\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.container.dxi_container\n \nimport\n \nDXIContainer\n\n\nfrom\n \ndxi.container.dxi_container\n \nimport\n \nDXIContainerConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIContainer() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nDXIContainerConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for Self Service Container class and CLI usage\n\n\n    \"\"\"\n\n\n    \nALL_DBS\n \n=\n \nFalse\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_container.log\"\n\n    \nBCK_FILE\n \n=\n \nNone\n\n    \nUSE_BACKUP\n \n=\n \nFalse\n\n    \nCREATE_BACKUP\n \n=\n \nFalse\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nNAME\n \n=\n \nNone\n\n    \nGROUP\n \n=\n \nNone\n\n    \nPARALLEL\n \n=\n \n5\n\n\n\n\nclass\n \nDXIContainer\n:\n\n    \n\"\"\"\n\n\n    Create a snapshot a dSource or VDB\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nDXIContainerConstants\n.\nENGINE_ID\n,\n\n        \nsingle_thread\n=\nDXIContainerConstants\n.\nSINGLE_THREAD\n,\n\n        \nconfig\n=\nDXIContainerConstants\n.\nCONFIG\n,\n\n        \nlog_file_path\n=\nDXIContainerConstants\n.\nLOG_FILE_PATH\n,\n\n        \npoll\n=\nDXIContainerConstants\n.\nPOLL\n,\n\n    \n):\n\n\n\n\ncreate:\n\u00b6\n\n\nCreate the SS container\n\n\nSignature\n\u00b6\n\n\ndef\n \ncreate\n(\nself\n,\n \ncontainer_name\n,\n \ntemplate_name\n,\n \ndatabase_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the JS Template to use for the container\n\n\nNone\n\n\n\n\n\n\ndatabase_name\n\n\nstr\n\n\nName of the child database(s) to use for the SS Container\n\n\nNone\n\n\n\n\n\n\n\n\ndelete:\n\u00b6\n\n\nDelete the SS container\n\n\nSignature\n\u00b6\n\n\ndef\n \ndelete\n(\nself\n,\n \ncontainer_name\n,\n \nkeep_vdbs\n=\nFalse\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\nkeep_vdbs\n\n\nbool\n\n\nIf set, deleting the container will not remove the underlying VDB\n\n\nFalse\n\n\n\n\n\n\n\n\nrefresh:\n\u00b6\n\n\nRefreshes a container\n\n\nSignature\n\u00b6\n\n\ndef\n \nrefresh\n(\nself\n,\n \ncontainer_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\n\n\nreset:\n\u00b6\n\n\nReset a container\n\n\nSignature\n\u00b6\n\n\ndef\n \nreset\n(\nself\n,\n \ncontainer_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\n\n\nlist:\n\u00b6\n\n\nGive all containers on a given engine\n\n\nSignature\n\u00b6\n\n\ndef\n \nlist\n(\nself\n)\n\n\n\n\nconnection_info:\n\u00b6\n\n\nList all database connection info\n\n\nSignature\n\u00b6\n\n\ndef\n \nconnection_info\n(\nself\n,\n \ncontainer_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\n\n\nadd_owner:\n\u00b6\n\n\nAdds an owner to a container\n\n\nSignature\n\u00b6\n\n\ndef\n \nadd_owner\n(\nself\n,\n \ncontainer_name\n,\n \ntemplate_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the JS Template to use for the container\n\n\nNone\n\n\n\n\n\n\n\n\nremove_owner:\n\u00b6\n\n\nRemoves an owner to a container\n\n\nSignature\n\u00b6\n\n\ndef\n \nremove_owner\n(\nself\n,\n \ncontainer_name\n,\n \ntemplate_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the JS Template to use for the container\n\n\nNone",
            "title": "DXIContainer"
        },
        {
            "location": "/References/Library_References/container/index.html#dxicontainer",
            "text": "A Container (Self Service Container) in Delphix refers to set of Virtual Datasets.\nthat are grouped together and can be operated on as a single unit through Delphix Self Service.  This class provides methods to trigger some of the most commonly used container related operations.",
            "title": "DXIContainer"
        },
        {
            "location": "/References/Library_References/container/index.html#how-to-import",
            "text": "from   dxi.container.dxi_container   import   DXIContainer  from   dxi.container.dxi_container   import   DXIContainerConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/container/index.html#create-object",
            "text": "obj = DXIContainer()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/container/index.html#classes",
            "text": "class   DXIContainerConstants ( object ): \n     \"\"\"      Define constants for Self Service Container class and CLI usage      \"\"\" \n\n     ALL_DBS   =   False \n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_container.log\" \n     BCK_FILE   =   None \n     USE_BACKUP   =   False \n     CREATE_BACKUP   =   False \n     ENGINE_ID   =   \"default\" \n     NAME   =   None \n     GROUP   =   None \n     PARALLEL   =   5  class   DXIContainer : \n     \"\"\"      Create a snapshot a dSource or VDB      \"\"\" \n\n     def   __init__ ( \n         self , \n         engine = DXIContainerConstants . ENGINE_ID , \n         single_thread = DXIContainerConstants . SINGLE_THREAD , \n         config = DXIContainerConstants . CONFIG , \n         log_file_path = DXIContainerConstants . LOG_FILE_PATH , \n         poll = DXIContainerConstants . POLL , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/container/index.html#create",
            "text": "Create the SS container",
            "title": "create:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature",
            "text": "def   create ( self ,   container_name ,   template_name ,   database_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None    template_name  str  Name of the JS Template to use for the container  None    database_name  str  Name of the child database(s) to use for the SS Container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html#delete",
            "text": "Delete the SS container",
            "title": "delete:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_1",
            "text": "def   delete ( self ,   container_name ,   keep_vdbs = False )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments_1",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None    keep_vdbs  bool  If set, deleting the container will not remove the underlying VDB  False",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html#refresh",
            "text": "Refreshes a container",
            "title": "refresh:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_2",
            "text": "def   refresh ( self ,   container_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments_2",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html#reset",
            "text": "Reset a container",
            "title": "reset:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_3",
            "text": "def   reset ( self ,   container_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments_3",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html#list",
            "text": "Give all containers on a given engine",
            "title": "list:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_4",
            "text": "def   list ( self )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#connection_info",
            "text": "List all database connection info",
            "title": "connection_info:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_5",
            "text": "def   connection_info ( self ,   container_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments_4",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html#add_owner",
            "text": "Adds an owner to a container",
            "title": "add_owner:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_6",
            "text": "def   add_owner ( self ,   container_name ,   template_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments_5",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None    template_name  str  Name of the JS Template to use for the container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/container/index.html#remove_owner",
            "text": "Removes an owner to a container",
            "title": "remove_owner:"
        },
        {
            "location": "/References/Library_References/container/index.html#signature_7",
            "text": "def   remove_owner ( self ,   container_name ,   template_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/container/index.html#arguments_6",
            "text": "Argument  Type  Description  Default      container_name  str  Name of the SS Container  None    template_name  str  Name of the JS Template to use for the container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/bookmark/index.html",
            "text": "DXIBookmark\n\u00b6\n\n\nBookmarks (Self Service Container Bookmark) are a way to mark and name a particular moment of \ndata on a timeline of a Self Service Container. \n\nYou can restore the active branch's timeline to the moment of data marked with a bookmark.\n\n\nThis class provides methods to trigger some of the most commonly used bookmark related operations.\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.bookmark.dxi_bookmark\n \nimport\n \nDXIBookmark\n\n\nfrom\n \ndxi.bookmark.dxi_bookmark\n \nimport\n \nBookmarkConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIBookmark() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nBookmarkConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Class of common Bookmark Constants\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_bookmark.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nTYPE\n \n=\n \nNone\n\n    \nACTION\n \n=\n \nNone\n\n    \nHOSTIP\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n    \nLIST_HEADER\n \n=\n \n[\n\n        \n\"Bookmark Name\"\n,\n\n        \n\"Bookmark Reference\"\n,\n\n        \n\"Branch\"\n,\n\n        \n\"Bookmark Type\"\n,\n\n        \n\"DataLayout Name\"\n,\n\n        \n\"Tags\"\n,\n\n    \n]\n\n\n\n\nclass\n \nDXIBookmark\n(\nDXIBase\n):\n\n    \n\"\"\"\n\n\n    Delphix Integration class for Bookmark Operations\n\n\n\n    This class contains all methods to perform Delphix \\\n\n\n    Self Service Bookmark Operations\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nBookmarkConstants\n.\nENGINE_ID\n,\n\n        \nlog_file_path\n=\nBookmarkConstants\n.\nLOG_FILE_PATH\n,\n\n        \nconfig_file\n=\nBookmarkConstants\n.\nCONFIG\n,\n\n        \npoll\n=\nBookmarkConstants\n.\nPOLL\n,\n\n        \nsingle_thread\n=\nBookmarkConstants\n.\nSINGLE_THREAD\n,\n\n        \nparallel\n=\nBookmarkConstants\n.\nPARALLEL\n,\n\n        \naction\n=\nBookmarkConstants\n.\nACTION\n,\n\n        \nmodule_name\n=\nBookmarkConstants\n.\nMODULE_NAME\n,\n\n    \n):\n\n\n\n\ncreate:\n\u00b6\n\n\nCreate a new bookmark\n\n\nSignature\n\u00b6\n\n\ndef\n \ncreate\n(\nself\n,\nbookmark_name\n,\n \ncontainer_name\n,\n \ntemplate_name\n,\n \nbranch_name\n=\nNone\n,\n \ntimestamp\n=\nNone\n,\n \nexpires\n=\nNone\n,\n \ntags\n=\nNone\n,\n \ndescription\n=\nNone\n,)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbookmark_name\n\n\nstr\n\n\nName of the bookmark to create\n\n\nNone\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the container to create the bookmark\n\n\nNone\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the template to create the bookmark\n\n\nNone\n\n\n\n\n\n\nbranch_name\n\n\nstr\n\n\nIf bookmark is not unique in a container\n\n\nNone\n\n\n\n\n\n\ntimestamp\n\n\nstr\n\n\nTimestamp to create the bookmark.\n\n\nNone\n\n\n\n\n\n\nexpires\n\n\nstr\n\n\nSet bookmark expiration time. Format \"%Y-%m-%dT%H:%M:%S\"\n\n\nNone\n\n\n\n\n\n\ntags\n\n\nstr\n\n\nTags to set on the bookmark\n\n\nNone\n\n\n\n\n\n\ndescription\n\n\nstr\n\n\nDescription for the bookmark\n\n\nNone\n\n\n\n\n\n\n\n\ndelete:\n\u00b6\n\n\nDelete a bookmark using bookmark name\n\n\nSignature\n\u00b6\n\n\ndef\n \ndelete\n(\nself\n,\n \nbookmark_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbookmark_name\n\n\nstr\n\n\nName of the bookmark to delete\n\n\nNone\n\n\n\n\n\n\n\n\nlist:\n\u00b6\n\n\nList all Bookmarks on an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \nlist\n(\nself\n,\n \ntags\n=\nNone\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntags\n\n\nstr\n\n\nTags to filter the bookmark names\n\n\nNone\n\n\n\n\n\n\n\n\nshare:\n\u00b6\n\n\nShare a bookmark by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nshare\n(\nself\n,\n \nbookmark_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbookmark_name\n\n\nstr\n\n\nName of the bookmark to delete\n\n\nNone\n\n\n\n\n\n\n\n\nunshare:\n\u00b6\n\n\nUnShare a bookmark by name\n\n\nSignature\n\u00b6\n\n\ndef\n \nunshare\n(\nself\n,\n \nbookmark_name\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbookmark_name\n\n\nstr\n\n\nName of the bookmark to delete\n\n\nNone\n\n\n\n\n\n\n\n\nupdate:\n\u00b6\n\n\nUpdates a bookmark using a bookmark name\n\n\nSignature\n\u00b6\n\n\ndef\n \nupdate\n(\nself\n,\nbookmark_name\n,\ntags\n=\nNone\n,\nexpires\n=\nNone\n,\nnew_bookmark_name\n=\nNone\n,\ndescription\n=\nNone\n,)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbookmark_name\n\n\nstr\n\n\nName of the bookmark to update\n\n\nNone\n\n\n\n\n\n\ntags\n\n\nstr\n\n\nIf updating tags, provide new tags. All existing tags on the bookmark will be replaced with new tags\n\n\nNone\n\n\n\n\n\n\nexpires\n\n\nstr\n\n\nIf updating expiration, provide new expiration date-time 'Format: \"%Y-%m-%dT%H:%M:%S\n\n\nNone\n\n\n\n\n\n\nnew_bookmark_name\n\n\nstr\n\n\nIf updating bookmark name, provide new name\n\n\nNone\n\n\n\n\n\n\ndescription\n\n\nstr\n\n\nIf updating description, provide new description.\n\n\nNone",
            "title": "DXIBookmark"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#dxibookmark",
            "text": "Bookmarks (Self Service Container Bookmark) are a way to mark and name a particular moment of \ndata on a timeline of a Self Service Container.  \nYou can restore the active branch's timeline to the moment of data marked with a bookmark.  This class provides methods to trigger some of the most commonly used bookmark related operations.",
            "title": "DXIBookmark"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#how-to-import",
            "text": "from   dxi.bookmark.dxi_bookmark   import   DXIBookmark  from   dxi.bookmark.dxi_bookmark   import   BookmarkConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#create-object",
            "text": "obj = DXIBookmark()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#classes",
            "text": "class   BookmarkConstants ( object ): \n     \"\"\"      Class of common Bookmark Constants      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_bookmark.log\" \n     ENGINE_ID   =   \"default\" \n     PARALLEL   =   5 \n     TYPE   =   None \n     ACTION   =   None \n     HOSTIP   =   None \n     MODULE_NAME   =   __name__ \n     LIST_HEADER   =   [ \n         \"Bookmark Name\" , \n         \"Bookmark Reference\" , \n         \"Branch\" , \n         \"Bookmark Type\" , \n         \"DataLayout Name\" , \n         \"Tags\" , \n     ]  class   DXIBookmark ( DXIBase ): \n     \"\"\"      Delphix Integration class for Bookmark Operations      This class contains all methods to perform Delphix \\      Self Service Bookmark Operations      \"\"\" \n\n     def   __init__ ( \n         self , \n         engine = BookmarkConstants . ENGINE_ID , \n         log_file_path = BookmarkConstants . LOG_FILE_PATH , \n         config_file = BookmarkConstants . CONFIG , \n         poll = BookmarkConstants . POLL , \n         single_thread = BookmarkConstants . SINGLE_THREAD , \n         parallel = BookmarkConstants . PARALLEL , \n         action = BookmarkConstants . ACTION , \n         module_name = BookmarkConstants . MODULE_NAME , \n     ):",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#create",
            "text": "Create a new bookmark",
            "title": "create:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#signature",
            "text": "def   create ( self , bookmark_name ,   container_name ,   template_name ,   branch_name = None ,   timestamp = None ,   expires = None ,   tags = None ,   description = None ,)",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#arguments",
            "text": "Argument  Type  Description  Default      bookmark_name  str  Name of the bookmark to create  None    container_name  str  Name of the container to create the bookmark  None    template_name  str  Name of the template to create the bookmark  None    branch_name  str  If bookmark is not unique in a container  None    timestamp  str  Timestamp to create the bookmark.  None    expires  str  Set bookmark expiration time. Format \"%Y-%m-%dT%H:%M:%S\"  None    tags  str  Tags to set on the bookmark  None    description  str  Description for the bookmark  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#delete",
            "text": "Delete a bookmark using bookmark name",
            "title": "delete:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#signature_1",
            "text": "def   delete ( self ,   bookmark_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#arguments_1",
            "text": "Argument  Type  Description  Default      bookmark_name  str  Name of the bookmark to delete  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#list",
            "text": "List all Bookmarks on an engine",
            "title": "list:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#signature_2",
            "text": "def   list ( self ,   tags = None )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#arguments_2",
            "text": "Argument  Type  Description  Default      tags  str  Tags to filter the bookmark names  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#share",
            "text": "Share a bookmark by name",
            "title": "share:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#signature_3",
            "text": "def   share ( self ,   bookmark_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#arguments_3",
            "text": "Argument  Type  Description  Default      bookmark_name  str  Name of the bookmark to delete  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#unshare",
            "text": "UnShare a bookmark by name",
            "title": "unshare:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#signature_4",
            "text": "def   unshare ( self ,   bookmark_name )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#arguments_4",
            "text": "Argument  Type  Description  Default      bookmark_name  str  Name of the bookmark to delete  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#update",
            "text": "Updates a bookmark using a bookmark name",
            "title": "update:"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#signature_5",
            "text": "def   update ( self , bookmark_name , tags = None , expires = None , new_bookmark_name = None , description = None ,)",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/bookmark/index.html#arguments_5",
            "text": "Argument  Type  Description  Default      bookmark_name  str  Name of the bookmark to update  None    tags  str  If updating tags, provide new tags. All existing tags on the bookmark will be replaced with new tags  None    expires  str  If updating expiration, provide new expiration date-time 'Format: \"%Y-%m-%dT%H:%M:%S  None    new_bookmark_name  str  If updating bookmark name, provide new name  None    description  str  If updating description, provide new description.  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/branch/index.html",
            "text": "DXIBranch\n\u00b6\n\n\nA branch (Self Service Container Branch) allows you create \nmultiple versions of your data within a container, just as you would do with code.\n\n\nThis class provides methods to trigger some of the most commonly used branch related operations.\n\n\nHow to import:\n\u00b6\n\n\nfrom\n \ndxi.branch.dxi_branch\n \nimport\n \nDXIBranch\n\n\nfrom\n \ndxi.branch.dxi_branch\n \nimport\n \nDXIBranchConstants\n\n\n\n\nCreate object:\n\u00b6\n\n\n   obj = DXIBranch() \n\n\n\nClasses:\n\u00b6\n\n\nclass\n \nDXIBranchConstants\n(\nobject\n):\n\n    \n\"\"\"\n\n\n    Define constants for SelfService Branch operations\n\n\n    \"\"\"\n\n\n    \nSINGLE_THREAD\n \n=\n \nFalse\n\n    \nPOLL\n \n=\n \n20\n\n    \nCONFIG\n \n=\n \n\"config/dxtools.conf\"\n\n    \nLOG_FILE_PATH\n \n=\n \n\"logs/dxi_branch.log\"\n\n    \nENGINE_ID\n \n=\n \n\"default\"\n\n    \nPARALLEL\n \n=\n \n5\n\n    \nTYPE\n \n=\n \nNone\n\n    \nACTION\n \n=\n \nNone\n\n    \nHOSTIP\n \n=\n \nNone\n\n    \nMODULE_NAME\n \n=\n \n__name__\n\n    \nLIST_HEADER\n \n=\n \n[\n\n        \n\"Branch Name\"\n,\n\n        \n\"Data Layout\"\n,\n\n        \n\"Layout Type\"\n,\n\n        \n\"Branch Reference\"\n,\n\n        \n\"End Time\"\n,\n\n    \n]\n\n\n\n\nclass\n \nDXIBranch\n:\n\n    \n\"\"\"\n\n\n    All Self Service Branch Operations\n\n\n    \"\"\"\n\n\n    \ndef\n \n__init__\n(\n\n        \nself\n,\n\n        \nengine\n=\nDXIBranchConstants\n.\nENGINE_ID\n,\n\n        \nlog_file_path\n=\nDXIBranchConstants\n.\nLOG_FILE_PATH\n,\n\n        \nconfig_file\n=\nDXIBranchConstants\n.\nCONFIG\n,\n\n        \npoll\n=\nDXIBranchConstants\n.\nPOLL\n,\n\n        \nsingle_thread\n=\nDXIBranchConstants\n.\nSINGLE_THREAD\n,\n\n        \nparallel\n=\nDXIBranchConstants\n.\nPARALLEL\n,\n\n        \naction\n=\nDXIBranchConstants\n.\nACTION\n,\n\n        \nmodule_name\n=\nDXIBranchConstants\n.\nMODULE_NAME\n,\n\n    \n)\n\n\n\n\nactivate:\n\u00b6\n\n\nActivates a self service branch\n\n\nSignature\n\u00b6\n\n\ndef\n \nactivate\n(\nself\n,\n \nbranch_name\n,\n \ncontainer_name\n=\nNone\n)\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbranch_name\n\n\nstr\n\n\nName of the branch to create\n\n\nNone\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\n\n\ncreate:\n\u00b6\n\n\nCreates a self service branch\n\n\nSignature\n\u00b6\n\n\ndef\n \ncreate\n(\nself\n,\n \nbranch_name\n,\n \ncontainer_name\n,\n \ntemplate_name\n=\nNone\n,\n \nbookmark_name\n=\nNone\n,\n \ntimestamp\n=\nNone\n):\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbranch_name\n\n\nstr\n\n\nName of the branch to create\n\n\nNone\n\n\n\n\n\n\ncontainer_name\n\n\nstr\n\n\nName of the SS Container\n\n\nNone\n\n\n\n\n\n\ntemplate_name\n\n\nstr\n\n\nName of the SS template\n\n\nNone\n\n\n\n\n\n\nbookmark_name\n\n\nstr\n\n\nBookmark to create branch\n\n\nNone\n\n\n\n\n\n\ntimestamp\n\n\nstr\n\n\nTimestamp to create branch\n\n\nNone\n\n\n\n\n\n\n\n\ndelete:\n\u00b6\n\n\nDelete a branch by name\n\n\nSignature\n\u00b6\n\n\ndef\n \ndelete\n(\nself\n,\n \nbranch_name\n):\n\n\n\n\nArguments\n\u00b6\n\n\n\n\n\n\n\n\nArgument\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbranch_name\n\n\nstr\n\n\nName of the branch to create\n\n\nNone\n\n\n\n\n\n\n\n\nlist:\n\u00b6\n\n\nList all branches on an engine\n\n\nSignature\n\u00b6\n\n\ndef\n \nlist\n(\nself\n):",
            "title": "DXIBranch"
        },
        {
            "location": "/References/Library_References/branch/index.html#dxibranch",
            "text": "A branch (Self Service Container Branch) allows you create \nmultiple versions of your data within a container, just as you would do with code.  This class provides methods to trigger some of the most commonly used branch related operations.",
            "title": "DXIBranch"
        },
        {
            "location": "/References/Library_References/branch/index.html#how-to-import",
            "text": "from   dxi.branch.dxi_branch   import   DXIBranch  from   dxi.branch.dxi_branch   import   DXIBranchConstants",
            "title": "How to import:"
        },
        {
            "location": "/References/Library_References/branch/index.html#create-object",
            "text": "obj = DXIBranch()",
            "title": "Create object:"
        },
        {
            "location": "/References/Library_References/branch/index.html#classes",
            "text": "class   DXIBranchConstants ( object ): \n     \"\"\"      Define constants for SelfService Branch operations      \"\"\" \n\n     SINGLE_THREAD   =   False \n     POLL   =   20 \n     CONFIG   =   \"config/dxtools.conf\" \n     LOG_FILE_PATH   =   \"logs/dxi_branch.log\" \n     ENGINE_ID   =   \"default\" \n     PARALLEL   =   5 \n     TYPE   =   None \n     ACTION   =   None \n     HOSTIP   =   None \n     MODULE_NAME   =   __name__ \n     LIST_HEADER   =   [ \n         \"Branch Name\" , \n         \"Data Layout\" , \n         \"Layout Type\" , \n         \"Branch Reference\" , \n         \"End Time\" , \n     ]  class   DXIBranch : \n     \"\"\"      All Self Service Branch Operations      \"\"\" \n\n     def   __init__ ( \n         self , \n         engine = DXIBranchConstants . ENGINE_ID , \n         log_file_path = DXIBranchConstants . LOG_FILE_PATH , \n         config_file = DXIBranchConstants . CONFIG , \n         poll = DXIBranchConstants . POLL , \n         single_thread = DXIBranchConstants . SINGLE_THREAD , \n         parallel = DXIBranchConstants . PARALLEL , \n         action = DXIBranchConstants . ACTION , \n         module_name = DXIBranchConstants . MODULE_NAME , \n     )",
            "title": "Classes:"
        },
        {
            "location": "/References/Library_References/branch/index.html#activate",
            "text": "Activates a self service branch",
            "title": "activate:"
        },
        {
            "location": "/References/Library_References/branch/index.html#signature",
            "text": "def   activate ( self ,   branch_name ,   container_name = None )",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/branch/index.html#arguments",
            "text": "Argument  Type  Description  Default      branch_name  str  Name of the branch to create  None    container_name  str  Name of the SS Container  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/branch/index.html#create",
            "text": "Creates a self service branch",
            "title": "create:"
        },
        {
            "location": "/References/Library_References/branch/index.html#signature_1",
            "text": "def   create ( self ,   branch_name ,   container_name ,   template_name = None ,   bookmark_name = None ,   timestamp = None ):",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/branch/index.html#arguments_1",
            "text": "Argument  Type  Description  Default      branch_name  str  Name of the branch to create  None    container_name  str  Name of the SS Container  None    template_name  str  Name of the SS template  None    bookmark_name  str  Bookmark to create branch  None    timestamp  str  Timestamp to create branch  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/branch/index.html#delete",
            "text": "Delete a branch by name",
            "title": "delete:"
        },
        {
            "location": "/References/Library_References/branch/index.html#signature_2",
            "text": "def   delete ( self ,   branch_name ):",
            "title": "Signature"
        },
        {
            "location": "/References/Library_References/branch/index.html#arguments_2",
            "text": "Argument  Type  Description  Default      branch_name  str  Name of the branch to create  None",
            "title": "Arguments"
        },
        {
            "location": "/References/Library_References/branch/index.html#list",
            "text": "List all branches on an engine",
            "title": "list:"
        },
        {
            "location": "/References/Library_References/branch/index.html#signature_3",
            "text": "def   list ( self ):",
            "title": "Signature"
        },
        {
            "location": "/Release_Notes/0.1.3/ReleaseNotes/index.html",
            "text": "dxi 0.1.3 Controlled Release\n\u00b6\n\n\nTo install dxi, refer to \nGetting started\n\n\nRelease info\n\u00b6\n\n\n\n\nUses Delphix Engine API version 1.10.2\n\n\nOperates on a single or multiple engines simultaneously\n\n\nRuns operations on an engine asynchronously.",
            "title": "dxi 0.1.3 Controlled Release"
        },
        {
            "location": "/Release_Notes/0.1.3/ReleaseNotes/index.html#dxi-013-controlled-release",
            "text": "To install dxi, refer to  Getting started",
            "title": "dxi 0.1.3 Controlled Release"
        },
        {
            "location": "/Release_Notes/0.1.3/ReleaseNotes/index.html#release-info",
            "text": "Uses Delphix Engine API version 1.10.2  Operates on a single or multiple engines simultaneously  Runs operations on an engine asynchronously.",
            "title": "Release info"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html",
            "text": "Integrate Delphix with Jenkins using dxi cli\n\u00b6\n\n\nNow that you have installed and configured dxi, let us explore how we can integrate Delphix operations into workflows. \nWe will be using a sample Jenkins Pipeline as an example. \n\n\nA Jenkins Pipeline Example 1\n\u00b6\n\n\nOur first example here is a Jenkins Declarative Pipeline that runs a set of automated tests.\nWe want to integrate a VDB Snapshot operation and a VDB Rewind operation into this pipeline.\nThis pipeline has 3 staps - \n\n\n\n\nPre-Test : Sets up the test environment\n\n\nAutomated Test1 : Runs a set of automation tests using a Delphix VDB named \"vdb1\"\n\n\nPost-Test: Tears down the test environment\n\n\n\n\n\n\nAdding a Delphix Snapshot Operation\n\u00b6\n\n\nLet's say, we want to modify this pipeline such that it take a snapshot of the VDB \n(vdb1)\n in Delphix before the tests run.\n\n\n\nFor this we can use the \ndxi snapshot\n cli command as follows\n\n\n\n    \n\n        \nJenkins Pipeline Script\n\n    \n\n    \n\n        \n    \npipeline\n \n{\n\n      \n...\n\n\n      \nstage\n(\n'VDB Snapshot'\n)\n \n{\n\n          \nsteps\n \n{\n\n\n            \nsh\n \n'/path/to/dxi database snapshot --name vdb1'\n\n\n          \n}\n\n      \n}\n\n\n      \n...\n\n    \n}\n\n\n\n    \n\n\n\n\n\nAdding a Delphix Rewind Operation\n\u00b6\n\n\nNext, we want to rewind the VDB \n(vdb1)\n after the tests are run.\n\n\n\nFor this we can use the \ndxi rewind\n cli command as follows\n\n\n\n    \n\n        \nJenkins Pipeline Script\n\n    \n\n    \n\n        \n    \npipeline\n \n{\n\n      \n...\n\n\n      \nstage\n(\n'VDB Snapshot'\n)\n \n{\n\n          \nsteps\n \n{\n\n\n            \nsh\n \n'/path/to/dxi database snapshot --name vdb1'\n\n\n          \n}\n\n      \n}\n\n      \n...\n\n      \nstage\n(\n'Automated Test 1'\n)\n \n{\n  \n      \n...\n\n      \n}\n\n      \nstage\n(\n'Rewind VDB'\n)\n \n{\n\n          \nsteps\n \n{\n\n\n            \nsh\n \n'/path/to/dxi database rewind --name vdb1'\n\n\n          \n}\n\n      \n}\n\n    \n}\n\n\n\n    \n\n\n\n\n\nThe Finished Pipeline\n\u00b6\n\n\n\n\nAnd you have now integrated Delphix Snapshot and Rewind operations into a Jenkins Pipeline.\n\n\nA Jenkins Pipeline Example 2\n\u00b6\n\n\nOur second example here is a Jenkins Declarative Pipeline that runs a series of automated tests, one after the other.  \n\n\nWe will use Delphix Self Service Containers (a group of VDBs) for this example as we want to create bookmarks between the different test executions. \nThese bookmarks are references to specific points in time on our container's timeline and can \nbe used to rewind our container to the timepoint referenced by the bookmark.\n\n\nThis pipeline has 4 staps -\n\n\n\n\nPre-Test : Sets up the test environment\n\n\nAutomated Test1 : Runs first set of automation tests using a Delphix Container named \ncontainer1\n\n\nAutomated Test2 : Runs second set of automation tests using a Delphix Container named \ncontainer1\n\n\nPost-Test: Tears down the test environment\n\n\n\n\nWe will integrate the following Delphix Operations into this pipeline  \n\n\n\n\nCreate a bookmark \nbmk-pre-test1\n before Automated Test 1  \n\n\nCreate a bookmark \nbmk-pre-test2\n before Automated Test 2  \n\n\nRewind the Container \ncontainer1\n to \nbmk-pre-test1\n after Automation Test 2  \n\n\n\n\n\n\nAdding the Container Bookmark Operations\n\u00b6\n\n\nWe can use \ndxi bookmark\n cli command as follows\n\n\n\n    \n\n        \nJenkins Pipeline Script\n\n    \n\n    \n\n        \n    \npipeline\n \n{\n\n      \n...\n\n\n      \nstage\n(\n'Create bmk-pre-test1'\n)\n \n{\n\n          \nsteps\n \n{\n\n\n            \nsh\n \n'/path/to/dxi  bookmark create\n\n\n                    --bookmarkname bmk-pre-test1 --containername container1'\n\n\n          \n}\n\n      \n}\n\n      \nstage\n(\n'Automated Test 2'\n)\n \n{\n\n          \n...\n\n      \n}\n\n      \nstage\n(\n'Create bmk-pre-test2'\n)\n \n{\n\n          \nsteps\n \n{\n\n\n            \nsh\n \n'/path/to/dxi bookmark create\n\n\n                    --bookmarkname bmk-pre-test2 --containername container1'\n\n\n          \n}\n\n      \n}\n\n      \n...\n\n    \n}\n\n\n\n    \n\n\n\n\n\nAdding the Container Restore Operations\n\u00b6\n\n\nNext, we want to rewind/restore the container \ncontainer1\n to \nbmk-pre-test2>/span>\n\n\nFor this we can use the \ndxi container\n cli command as follows\n\n\n\n    \n\n        \nJenkins Pipeline Script\n\n    \n\n    \n\n        \n    \npipeline\n \n{\n\n      \n...\n\n\n      \nstage\n(\n'Create bmk-pre-test1'\n)\n \n{\n\n          \nsteps\n \n{\n\n            \nsh\n \n'/path/to/dxi bookmark create \n\n\n                    --bookmarkname bmk-pre-test1 --containername container1'\n\n          \n}\n\n      \n}\n\n      \nstage\n(\n'Automated Test 2'\n)\n \n{\n\n          \n...\n\n      \n}\n\n      \nstage\n(\n'Create bmk-pre-test2'\n)\n \n{\n\n          \nsteps\n \n{\n\n            \nsh\n \n'/path/to/dxi bookmark create \n\n\n                    --bookmarkname bmk-pre-test2 --containername container1'\n\n          \n}\n\n      \n}\n\n      \nstage\n(\n'Restore to bmk-pre-test1'\n)\n \n{\n\n          \nsteps\n \n{\n\n\n            \nsh\n \n'/path/to/dxi container restore \n\n\n                    --bookmark_name bmk-pre-test2 --container_name container1'\n\n\n          \n}\n\n      \n}\n\n      \n...\n\n    \n}\n\n\n\n    \n\n\n\n\n\nThe Finished Pipeline\n\u00b6\n\n\n\n\nAnd you have now integrated Delphix Self Service Container Operations into a Jenkins Pipeline.\n\n\nWhat's Next?\n\u00b6\n\n\nAs you have seen, with dxi, integration of Delphix Operations into your workflows take only a few minutes. \nFor information on all supported Delphix operations, read our \nReferences\n section.",
            "title": "Integrate Delphix with Jenkins using dxi cli"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#integrate-delphix-with-jenkins-using-dxi-cli",
            "text": "Now that you have installed and configured dxi, let us explore how we can integrate Delphix operations into workflows. \nWe will be using a sample Jenkins Pipeline as an example.",
            "title": "Integrate Delphix with Jenkins using dxi cli"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#a-jenkins-pipeline-example-1",
            "text": "Our first example here is a Jenkins Declarative Pipeline that runs a set of automated tests.\nWe want to integrate a VDB Snapshot operation and a VDB Rewind operation into this pipeline.\nThis pipeline has 3 staps -    Pre-Test : Sets up the test environment  Automated Test1 : Runs a set of automation tests using a Delphix VDB named \"vdb1\"  Post-Test: Tears down the test environment",
            "title": "A Jenkins Pipeline Example 1"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#adding-a-delphix-snapshot-operation",
            "text": "Let's say, we want to modify this pipeline such that it take a snapshot of the VDB  (vdb1)  in Delphix before the tests run.  For this we can use the  dxi snapshot  cli command as follows  \n     \n         Jenkins Pipeline Script \n     \n     \n              pipeline   { \n       ... \n\n       stage ( 'VDB Snapshot' )   { \n           steps   {               sh   '/path/to/dxi database snapshot --name vdb1'             } \n       } \n\n       ... \n     }",
            "title": "Adding a Delphix Snapshot Operation"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#adding-a-delphix-rewind-operation",
            "text": "Next, we want to rewind the VDB  (vdb1)  after the tests are run.  For this we can use the  dxi rewind  cli command as follows  \n     \n         Jenkins Pipeline Script \n     \n     \n              pipeline   { \n       ... \n\n       stage ( 'VDB Snapshot' )   { \n           steps   {               sh   '/path/to/dxi database snapshot --name vdb1'             } \n       } \n       ... \n       stage ( 'Automated Test 1' )   {   \n       ... \n       } \n       stage ( 'Rewind VDB' )   { \n           steps   {               sh   '/path/to/dxi database rewind --name vdb1'             } \n       } \n     }",
            "title": "Adding a Delphix Rewind Operation"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#the-finished-pipeline",
            "text": "And you have now integrated Delphix Snapshot and Rewind operations into a Jenkins Pipeline.",
            "title": "The Finished Pipeline"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#a-jenkins-pipeline-example-2",
            "text": "Our second example here is a Jenkins Declarative Pipeline that runs a series of automated tests, one after the other.    We will use Delphix Self Service Containers (a group of VDBs) for this example as we want to create bookmarks between the different test executions. \nThese bookmarks are references to specific points in time on our container's timeline and can \nbe used to rewind our container to the timepoint referenced by the bookmark.  This pipeline has 4 staps -   Pre-Test : Sets up the test environment  Automated Test1 : Runs first set of automation tests using a Delphix Container named  container1  Automated Test2 : Runs second set of automation tests using a Delphix Container named  container1  Post-Test: Tears down the test environment   We will integrate the following Delphix Operations into this pipeline     Create a bookmark  bmk-pre-test1  before Automated Test 1    Create a bookmark  bmk-pre-test2  before Automated Test 2    Rewind the Container  container1  to  bmk-pre-test1  after Automation Test 2",
            "title": "A Jenkins Pipeline Example 2"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#adding-the-container-bookmark-operations",
            "text": "We can use  dxi bookmark  cli command as follows  \n     \n         Jenkins Pipeline Script \n     \n     \n              pipeline   { \n       ... \n\n       stage ( 'Create bmk-pre-test1' )   { \n           steps   {               sh   '/path/to/dxi  bookmark create                      --bookmarkname bmk-pre-test1 --containername container1'             } \n       } \n       stage ( 'Automated Test 2' )   { \n           ... \n       } \n       stage ( 'Create bmk-pre-test2' )   { \n           steps   {               sh   '/path/to/dxi bookmark create                      --bookmarkname bmk-pre-test2 --containername container1'             } \n       } \n       ... \n     }",
            "title": "Adding the Container Bookmark Operations"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#adding-the-container-restore-operations",
            "text": "Next, we want to rewind/restore the container  container1  to  bmk-pre-test2>/span>  For this we can use the  dxi container  cli command as follows  \n     \n         Jenkins Pipeline Script \n     \n     \n              pipeline   { \n       ... \n\n       stage ( 'Create bmk-pre-test1' )   { \n           steps   { \n             sh   '/path/to/dxi bookmark create                       --bookmarkname bmk-pre-test1 --containername container1' \n           } \n       } \n       stage ( 'Automated Test 2' )   { \n           ... \n       } \n       stage ( 'Create bmk-pre-test2' )   { \n           steps   { \n             sh   '/path/to/dxi bookmark create                       --bookmarkname bmk-pre-test2 --containername container1' \n           } \n       } \n       stage ( 'Restore to bmk-pre-test1' )   { \n           steps   {               sh   '/path/to/dxi container restore                       --bookmark_name bmk-pre-test2 --container_name container1'             } \n       } \n       ... \n     }",
            "title": "Adding the Container Restore Operations"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#the-finished-pipeline_1",
            "text": "And you have now integrated Delphix Self Service Container Operations into a Jenkins Pipeline.",
            "title": "The Finished Pipeline"
        },
        {
            "location": "/Building_Your_First_Integrations/Jenkins/index.html#whats-next",
            "text": "As you have seen, with dxi, integration of Delphix Operations into your workflows take only a few minutes. \nFor information on all supported Delphix operations, read our  References  section.",
            "title": "What's Next?"
        }
    ]
}